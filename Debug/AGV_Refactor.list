
AGV_Refactor.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b4  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08001474  08001474  00002474  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080015a8  080015a8  00003050  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080015a8  080015a8  00003050  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080015a8  080015a8  00003050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080015a8  080015a8  000025a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080015ac  080015ac  000025ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000050  20000000  080015b0  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  20000050  08001600  00003050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000260  08001600  00003260  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00003050  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001133  00000000  00000000  00003078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000648  00000000  00000000  000041ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  000047f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000b4  00000000  00000000  00004918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b483  00000000  00000000  000049cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002461  00000000  00000000  0000fe4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0003a8c5  00000000  00000000  000122b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0004cb75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000008d4  00000000  00000000  0004cbb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0004d48c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000050 	.word	0x20000050
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800145c 	.word	0x0800145c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000054 	.word	0x20000054
 8000104:	0800145c 	.word	0x0800145c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	@ 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f806 	bl	8000240 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			@ (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__aeabi_idiv0>:
 8000240:	4770      	bx	lr
 8000242:	46c0      	nop			@ (mov r8, r8)

08000244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b082      	sub	sp, #8
 8000248:	af00      	add	r7, sp, #0
 800024a:	0002      	movs	r2, r0
 800024c:	1dfb      	adds	r3, r7, #7
 800024e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000250:	1dfb      	adds	r3, r7, #7
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	2b7f      	cmp	r3, #127	@ 0x7f
 8000256:	d809      	bhi.n	800026c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000258:	1dfb      	adds	r3, r7, #7
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	001a      	movs	r2, r3
 800025e:	231f      	movs	r3, #31
 8000260:	401a      	ands	r2, r3
 8000262:	4b04      	ldr	r3, [pc, #16]	@ (8000274 <__NVIC_EnableIRQ+0x30>)
 8000264:	2101      	movs	r1, #1
 8000266:	4091      	lsls	r1, r2
 8000268:	000a      	movs	r2, r1
 800026a:	601a      	str	r2, [r3, #0]
  }
}
 800026c:	46c0      	nop			@ (mov r8, r8)
 800026e:	46bd      	mov	sp, r7
 8000270:	b002      	add	sp, #8
 8000272:	bd80      	pop	{r7, pc}
 8000274:	e000e100 	.word	0xe000e100

08000278 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	0002      	movs	r2, r0
 8000280:	6039      	str	r1, [r7, #0]
 8000282:	1dfb      	adds	r3, r7, #7
 8000284:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000286:	1dfb      	adds	r3, r7, #7
 8000288:	781b      	ldrb	r3, [r3, #0]
 800028a:	2b7f      	cmp	r3, #127	@ 0x7f
 800028c:	d828      	bhi.n	80002e0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800028e:	4a2f      	ldr	r2, [pc, #188]	@ (800034c <__NVIC_SetPriority+0xd4>)
 8000290:	1dfb      	adds	r3, r7, #7
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	b25b      	sxtb	r3, r3
 8000296:	089b      	lsrs	r3, r3, #2
 8000298:	33c0      	adds	r3, #192	@ 0xc0
 800029a:	009b      	lsls	r3, r3, #2
 800029c:	589b      	ldr	r3, [r3, r2]
 800029e:	1dfa      	adds	r2, r7, #7
 80002a0:	7812      	ldrb	r2, [r2, #0]
 80002a2:	0011      	movs	r1, r2
 80002a4:	2203      	movs	r2, #3
 80002a6:	400a      	ands	r2, r1
 80002a8:	00d2      	lsls	r2, r2, #3
 80002aa:	21ff      	movs	r1, #255	@ 0xff
 80002ac:	4091      	lsls	r1, r2
 80002ae:	000a      	movs	r2, r1
 80002b0:	43d2      	mvns	r2, r2
 80002b2:	401a      	ands	r2, r3
 80002b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80002b6:	683b      	ldr	r3, [r7, #0]
 80002b8:	019b      	lsls	r3, r3, #6
 80002ba:	22ff      	movs	r2, #255	@ 0xff
 80002bc:	401a      	ands	r2, r3
 80002be:	1dfb      	adds	r3, r7, #7
 80002c0:	781b      	ldrb	r3, [r3, #0]
 80002c2:	0018      	movs	r0, r3
 80002c4:	2303      	movs	r3, #3
 80002c6:	4003      	ands	r3, r0
 80002c8:	00db      	lsls	r3, r3, #3
 80002ca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002cc:	481f      	ldr	r0, [pc, #124]	@ (800034c <__NVIC_SetPriority+0xd4>)
 80002ce:	1dfb      	adds	r3, r7, #7
 80002d0:	781b      	ldrb	r3, [r3, #0]
 80002d2:	b25b      	sxtb	r3, r3
 80002d4:	089b      	lsrs	r3, r3, #2
 80002d6:	430a      	orrs	r2, r1
 80002d8:	33c0      	adds	r3, #192	@ 0xc0
 80002da:	009b      	lsls	r3, r3, #2
 80002dc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80002de:	e031      	b.n	8000344 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80002e0:	4a1b      	ldr	r2, [pc, #108]	@ (8000350 <__NVIC_SetPriority+0xd8>)
 80002e2:	1dfb      	adds	r3, r7, #7
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	0019      	movs	r1, r3
 80002e8:	230f      	movs	r3, #15
 80002ea:	400b      	ands	r3, r1
 80002ec:	3b08      	subs	r3, #8
 80002ee:	089b      	lsrs	r3, r3, #2
 80002f0:	3306      	adds	r3, #6
 80002f2:	009b      	lsls	r3, r3, #2
 80002f4:	18d3      	adds	r3, r2, r3
 80002f6:	3304      	adds	r3, #4
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	1dfa      	adds	r2, r7, #7
 80002fc:	7812      	ldrb	r2, [r2, #0]
 80002fe:	0011      	movs	r1, r2
 8000300:	2203      	movs	r2, #3
 8000302:	400a      	ands	r2, r1
 8000304:	00d2      	lsls	r2, r2, #3
 8000306:	21ff      	movs	r1, #255	@ 0xff
 8000308:	4091      	lsls	r1, r2
 800030a:	000a      	movs	r2, r1
 800030c:	43d2      	mvns	r2, r2
 800030e:	401a      	ands	r2, r3
 8000310:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000312:	683b      	ldr	r3, [r7, #0]
 8000314:	019b      	lsls	r3, r3, #6
 8000316:	22ff      	movs	r2, #255	@ 0xff
 8000318:	401a      	ands	r2, r3
 800031a:	1dfb      	adds	r3, r7, #7
 800031c:	781b      	ldrb	r3, [r3, #0]
 800031e:	0018      	movs	r0, r3
 8000320:	2303      	movs	r3, #3
 8000322:	4003      	ands	r3, r0
 8000324:	00db      	lsls	r3, r3, #3
 8000326:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000328:	4809      	ldr	r0, [pc, #36]	@ (8000350 <__NVIC_SetPriority+0xd8>)
 800032a:	1dfb      	adds	r3, r7, #7
 800032c:	781b      	ldrb	r3, [r3, #0]
 800032e:	001c      	movs	r4, r3
 8000330:	230f      	movs	r3, #15
 8000332:	4023      	ands	r3, r4
 8000334:	3b08      	subs	r3, #8
 8000336:	089b      	lsrs	r3, r3, #2
 8000338:	430a      	orrs	r2, r1
 800033a:	3306      	adds	r3, #6
 800033c:	009b      	lsls	r3, r3, #2
 800033e:	18c3      	adds	r3, r0, r3
 8000340:	3304      	adds	r3, #4
 8000342:	601a      	str	r2, [r3, #0]
}
 8000344:	46c0      	nop			@ (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b003      	add	sp, #12
 800034a:	bd90      	pop	{r4, r7, pc}
 800034c:	e000e100 	.word	0xe000e100
 8000350:	e000ed00 	.word	0xe000ed00

08000354 <bluetoothInit>:
 *      Author: Ivani
 */
#include "bluetoothInit.h"
#include "stm32f051x8.h"

void bluetoothInit(void){
 8000354:	b580      	push	{r7, lr}
 8000356:	af00      	add	r7, sp, #0
	RCC->APB1ENR |= RCC_APB1ENR_USART2EN;//Habilitar Reloj para el periférico de comunicación USART
 8000358:	4b13      	ldr	r3, [pc, #76]	@ (80003a8 <bluetoothInit+0x54>)
 800035a:	69da      	ldr	r2, [r3, #28]
 800035c:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <bluetoothInit+0x54>)
 800035e:	2180      	movs	r1, #128	@ 0x80
 8000360:	0289      	lsls	r1, r1, #10
 8000362:	430a      	orrs	r2, r1
 8000364:	61da      	str	r2, [r3, #28]

	// Configurar pines PA2 (TX) y PA3 (RX) como función alterna
	GPIOA->MODER |= (GPIO_MODER_MODER2_1 | GPIO_MODER_MODER3_1);
 8000366:	2390      	movs	r3, #144	@ 0x90
 8000368:	05db      	lsls	r3, r3, #23
 800036a:	681a      	ldr	r2, [r3, #0]
 800036c:	2390      	movs	r3, #144	@ 0x90
 800036e:	05db      	lsls	r3, r3, #23
 8000370:	21a0      	movs	r1, #160	@ 0xa0
 8000372:	430a      	orrs	r2, r1
 8000374:	601a      	str	r2, [r3, #0]
	GPIOA->AFR[0] |= (1 << (2*4)) | (1 << (3*4));//AF1
 8000376:	2390      	movs	r3, #144	@ 0x90
 8000378:	05db      	lsls	r3, r3, #23
 800037a:	6a1a      	ldr	r2, [r3, #32]
 800037c:	2390      	movs	r3, #144	@ 0x90
 800037e:	05db      	lsls	r3, r3, #23
 8000380:	2188      	movs	r1, #136	@ 0x88
 8000382:	0149      	lsls	r1, r1, #5
 8000384:	430a      	orrs	r2, r1
 8000386:	621a      	str	r2, [r3, #32]

	USART2->BRR = 8000000 / 9600;  // Baudrate a 9600 (8 MHz clock)
 8000388:	4b08      	ldr	r3, [pc, #32]	@ (80003ac <bluetoothInit+0x58>)
 800038a:	4a09      	ldr	r2, [pc, #36]	@ (80003b0 <bluetoothInit+0x5c>)
 800038c:	60da      	str	r2, [r3, #12]
	USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE | USART_CR1_RXNEIE;//Habilitar transmisor, receptor, USART y  la interrupción para recepción
 800038e:	4b07      	ldr	r3, [pc, #28]	@ (80003ac <bluetoothInit+0x58>)
 8000390:	222d      	movs	r2, #45	@ 0x2d
 8000392:	601a      	str	r2, [r3, #0]

	NVIC_SetPriority(USART2_IRQn, 2);//Definir prioridad de interrupción media
 8000394:	2102      	movs	r1, #2
 8000396:	201c      	movs	r0, #28
 8000398:	f7ff ff6e 	bl	8000278 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);//Habilitar rutina de interrupción
 800039c:	201c      	movs	r0, #28
 800039e:	f7ff ff51 	bl	8000244 <__NVIC_EnableIRQ>
}
 80003a2:	46c0      	nop			@ (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	40021000 	.word	0x40021000
 80003ac:	40004400 	.word	0x40004400
 80003b0:	00000341 	.word	0x00000341

080003b4 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	af00      	add	r7, sp, #0
    pwmInit();
 80003b8:	f000 f82c 	bl	8000414 <pwmInit>
    bluetoothInit();
 80003bc:	f7ff ffca 	bl	8000354 <bluetoothInit>
    readCommand();
 80003c0:	f000 f8da 	bl	8000578 <readCommand>
 80003c4:	2300      	movs	r3, #0
}
 80003c6:	0018      	movs	r0, r3
 80003c8:	46bd      	mov	sp, r7
 80003ca:	bd80      	pop	{r7, pc}

080003cc <processCommand>:
#include "processCommand.h"
#include <stdio.h>
#include "setDuty.h"


void processCommand(const char* cmd) {//Función para procesar comando de acción
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b084      	sub	sp, #16
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
    int duty, channel;
    if(sscanf(cmd, "%d %d", &duty, &channel) == 2) {//Escanea del buffer los argumentos para el set duty
 80003d4:	2308      	movs	r3, #8
 80003d6:	18fb      	adds	r3, r7, r3
 80003d8:	220c      	movs	r2, #12
 80003da:	18ba      	adds	r2, r7, r2
 80003dc:	490c      	ldr	r1, [pc, #48]	@ (8000410 <processCommand+0x44>)
 80003de:	6878      	ldr	r0, [r7, #4]
 80003e0:	f000 f9de 	bl	80007a0 <siscanf>
 80003e4:	0003      	movs	r3, r0
 80003e6:	2b02      	cmp	r3, #2
 80003e8:	d10d      	bne.n	8000406 <processCommand+0x3a>
        if(channel >= 1 && channel <= 6) {//Validación de comando
 80003ea:	68bb      	ldr	r3, [r7, #8]
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	dd0a      	ble.n	8000406 <processCommand+0x3a>
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	2b06      	cmp	r3, #6
 80003f4:	dc07      	bgt.n	8000406 <processCommand+0x3a>
            setDuty(channel, duty);//Call a set duty
 80003f6:	68bb      	ldr	r3, [r7, #8]
 80003f8:	b2db      	uxtb	r3, r3
 80003fa:	68fa      	ldr	r2, [r7, #12]
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	0011      	movs	r1, r2
 8000400:	0018      	movs	r0, r3
 8000402:	f000 f913 	bl	800062c <setDuty>
        }
    }
}
 8000406:	46c0      	nop			@ (mov r8, r8)
 8000408:	46bd      	mov	sp, r7
 800040a:	b004      	add	sp, #16
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			@ (mov r8, r8)
 8000410:	08001474 	.word	0x08001474

08000414 <pwmInit>:
 *      Author: Ivani
 */
#include "pwmInit.h";
#include "stm32f051x8.h"

void pwmInit (void){
 8000414:	b580      	push	{r7, lr}
 8000416:	b082      	sub	sp, #8
 8000418:	af00      	add	r7, sp, #0
	RCC->AHBENR |= RCC_AHBENR_GPIOCEN;
 800041a:	4b3a      	ldr	r3, [pc, #232]	@ (8000504 <pwmInit+0xf0>)
 800041c:	695a      	ldr	r2, [r3, #20]
 800041e:	4b39      	ldr	r3, [pc, #228]	@ (8000504 <pwmInit+0xf0>)
 8000420:	2180      	movs	r1, #128	@ 0x80
 8000422:	0309      	lsls	r1, r1, #12
 8000424:	430a      	orrs	r2, r1
 8000426:	615a      	str	r2, [r3, #20]
	RCC->APB1ENR |= RCC_APB1ENR_TIM3EN;
 8000428:	4b36      	ldr	r3, [pc, #216]	@ (8000504 <pwmInit+0xf0>)
 800042a:	69da      	ldr	r2, [r3, #28]
 800042c:	4b35      	ldr	r3, [pc, #212]	@ (8000504 <pwmInit+0xf0>)
 800042e:	2102      	movs	r1, #2
 8000430:	430a      	orrs	r2, r1
 8000432:	61da      	str	r2, [r3, #28]
	for (int i = 6;i<=9;i++){
 8000434:	2306      	movs	r3, #6
 8000436:	607b      	str	r3, [r7, #4]
 8000438:	e019      	b.n	800046e <pwmInit+0x5a>
		GPIOC->MODER &=~(0x3<<i*2);//Máscara para limpieza de los bits
 800043a:	4b33      	ldr	r3, [pc, #204]	@ (8000508 <pwmInit+0xf4>)
 800043c:	681a      	ldr	r2, [r3, #0]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	2103      	movs	r1, #3
 8000444:	4099      	lsls	r1, r3
 8000446:	000b      	movs	r3, r1
 8000448:	43db      	mvns	r3, r3
 800044a:	0019      	movs	r1, r3
 800044c:	4b2e      	ldr	r3, [pc, #184]	@ (8000508 <pwmInit+0xf4>)
 800044e:	400a      	ands	r2, r1
 8000450:	601a      	str	r2, [r3, #0]
		GPIOC->MODER |=(0x2<<i*2);// 0x2 = 1 0, modo alternativo
 8000452:	4b2d      	ldr	r3, [pc, #180]	@ (8000508 <pwmInit+0xf4>)
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	005b      	lsls	r3, r3, #1
 800045a:	2102      	movs	r1, #2
 800045c:	4099      	lsls	r1, r3
 800045e:	000b      	movs	r3, r1
 8000460:	0019      	movs	r1, r3
 8000462:	4b29      	ldr	r3, [pc, #164]	@ (8000508 <pwmInit+0xf4>)
 8000464:	430a      	orrs	r2, r1
 8000466:	601a      	str	r2, [r3, #0]
	for (int i = 6;i<=9;i++){
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	3301      	adds	r3, #1
 800046c:	607b      	str	r3, [r7, #4]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	2b09      	cmp	r3, #9
 8000472:	dde2      	ble.n	800043a <pwmInit+0x26>
	}
	for (int i = 6;i<=7;i++){
 8000474:	2306      	movs	r3, #6
 8000476:	603b      	str	r3, [r7, #0]
 8000478:	e015      	b.n	80004a6 <pwmInit+0x92>
		GPIOC->AFR[0]&=~(0xF<<6*4);//Función alternativa pwm
 800047a:	4b23      	ldr	r3, [pc, #140]	@ (8000508 <pwmInit+0xf4>)
 800047c:	6a1a      	ldr	r2, [r3, #32]
 800047e:	4b22      	ldr	r3, [pc, #136]	@ (8000508 <pwmInit+0xf4>)
 8000480:	4922      	ldr	r1, [pc, #136]	@ (800050c <pwmInit+0xf8>)
 8000482:	400a      	ands	r2, r1
 8000484:	621a      	str	r2, [r3, #32]
		GPIOC->AFR[1]&=~(0xF<<(i-6)*4);//Función alternativa pwm
 8000486:	4b20      	ldr	r3, [pc, #128]	@ (8000508 <pwmInit+0xf4>)
 8000488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800048a:	683b      	ldr	r3, [r7, #0]
 800048c:	3b06      	subs	r3, #6
 800048e:	009b      	lsls	r3, r3, #2
 8000490:	210f      	movs	r1, #15
 8000492:	4099      	lsls	r1, r3
 8000494:	000b      	movs	r3, r1
 8000496:	43db      	mvns	r3, r3
 8000498:	0019      	movs	r1, r3
 800049a:	4b1b      	ldr	r3, [pc, #108]	@ (8000508 <pwmInit+0xf4>)
 800049c:	400a      	ands	r2, r1
 800049e:	625a      	str	r2, [r3, #36]	@ 0x24
	for (int i = 6;i<=7;i++){
 80004a0:	683b      	ldr	r3, [r7, #0]
 80004a2:	3301      	adds	r3, #1
 80004a4:	603b      	str	r3, [r7, #0]
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	2b07      	cmp	r3, #7
 80004aa:	dde6      	ble.n	800047a <pwmInit+0x66>
		}
	TIM3->PSC=7;//(8MHz /(7+1)
 80004ac:	4b18      	ldr	r3, [pc, #96]	@ (8000510 <pwmInit+0xfc>)
 80004ae:	2207      	movs	r2, #7
 80004b0:	629a      	str	r2, [r3, #40]	@ 0x28
	TIM3->ARR=999;//Alto hasta contar 1000 veces, depués inicia overflow count
 80004b2:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <pwmInit+0xfc>)
 80004b4:	4a17      	ldr	r2, [pc, #92]	@ (8000514 <pwmInit+0x100>)
 80004b6:	62da      	str	r2, [r3, #44]	@ 0x2c
	TIM3->CCMR1|=(0x6<<4)|(0x6<<12);//Mode PWM1
 80004b8:	4b15      	ldr	r3, [pc, #84]	@ (8000510 <pwmInit+0xfc>)
 80004ba:	699a      	ldr	r2, [r3, #24]
 80004bc:	4b14      	ldr	r3, [pc, #80]	@ (8000510 <pwmInit+0xfc>)
 80004be:	4916      	ldr	r1, [pc, #88]	@ (8000518 <pwmInit+0x104>)
 80004c0:	430a      	orrs	r2, r1
 80004c2:	619a      	str	r2, [r3, #24]
	TIM3->CCMR2|=(0x6<<4)|(0x6<<12);
 80004c4:	4b12      	ldr	r3, [pc, #72]	@ (8000510 <pwmInit+0xfc>)
 80004c6:	69da      	ldr	r2, [r3, #28]
 80004c8:	4b11      	ldr	r3, [pc, #68]	@ (8000510 <pwmInit+0xfc>)
 80004ca:	4913      	ldr	r1, [pc, #76]	@ (8000518 <pwmInit+0x104>)
 80004cc:	430a      	orrs	r2, r1
 80004ce:	61da      	str	r2, [r3, #28]
    TIM3->CCER = TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC3E | TIM_CCER_CC4E;//Hablitar los cuatro channels
 80004d0:	4b0f      	ldr	r3, [pc, #60]	@ (8000510 <pwmInit+0xfc>)
 80004d2:	4a12      	ldr	r2, [pc, #72]	@ (800051c <pwmInit+0x108>)
 80004d4:	621a      	str	r2, [r3, #32]
	//Iniciar en 0% el dutycycle
    TIM3->CCR1=0;
 80004d6:	4b0e      	ldr	r3, [pc, #56]	@ (8000510 <pwmInit+0xfc>)
 80004d8:	2200      	movs	r2, #0
 80004da:	635a      	str	r2, [r3, #52]	@ 0x34
	TIM3->CCR2=0;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000510 <pwmInit+0xfc>)
 80004de:	2200      	movs	r2, #0
 80004e0:	639a      	str	r2, [r3, #56]	@ 0x38
	TIM3->CCR3=0;
 80004e2:	4b0b      	ldr	r3, [pc, #44]	@ (8000510 <pwmInit+0xfc>)
 80004e4:	2200      	movs	r2, #0
 80004e6:	63da      	str	r2, [r3, #60]	@ 0x3c
	TIM3->CCR4=0;
 80004e8:	4b09      	ldr	r3, [pc, #36]	@ (8000510 <pwmInit+0xfc>)
 80004ea:	2200      	movs	r2, #0
 80004ec:	641a      	str	r2, [r3, #64]	@ 0x40
    TIM3->CR1|=(1<<0);//Habilitar el conteo
 80004ee:	4b08      	ldr	r3, [pc, #32]	@ (8000510 <pwmInit+0xfc>)
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b07      	ldr	r3, [pc, #28]	@ (8000510 <pwmInit+0xfc>)
 80004f4:	2101      	movs	r1, #1
 80004f6:	430a      	orrs	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]

}
 80004fa:	46c0      	nop			@ (mov r8, r8)
 80004fc:	46bd      	mov	sp, r7
 80004fe:	b002      	add	sp, #8
 8000500:	bd80      	pop	{r7, pc}
 8000502:	46c0      	nop			@ (mov r8, r8)
 8000504:	40021000 	.word	0x40021000
 8000508:	48000800 	.word	0x48000800
 800050c:	f0ffffff 	.word	0xf0ffffff
 8000510:	40000400 	.word	0x40000400
 8000514:	000003e7 	.word	0x000003e7
 8000518:	00006060 	.word	0x00006060
 800051c:	00001111 	.word	0x00001111

08000520 <USART2_IRQHandler>:
volatile char uart_buffer[UART_BUFFER_SIZE];
volatile uint8_t uart_head = 0, uart_tail = 0;
char cmd_buffer[32];
uint8_t idx = 0;

void USART2_IRQHandler(void) {//Algoritmo de buffer circular
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
    if(USART2->ISR & USART_ISR_RXNE) {//Verifica si se recibe un dato al activarse la flag de interrupción
 8000524:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <USART2_IRQHandler+0x48>)
 8000526:	69db      	ldr	r3, [r3, #28]
 8000528:	2220      	movs	r2, #32
 800052a:	4013      	ands	r3, r2
 800052c:	d018      	beq.n	8000560 <USART2_IRQHandler+0x40>
        uart_buffer[uart_head] = USART2->RDR;//Almacena el último dato recibido en el buffer
 800052e:	4b0e      	ldr	r3, [pc, #56]	@ (8000568 <USART2_IRQHandler+0x48>)
 8000530:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8000532:	b299      	uxth	r1, r3
 8000534:	4b0d      	ldr	r3, [pc, #52]	@ (800056c <USART2_IRQHandler+0x4c>)
 8000536:	781b      	ldrb	r3, [r3, #0]
 8000538:	b2db      	uxtb	r3, r3
 800053a:	001a      	movs	r2, r3
 800053c:	b2c9      	uxtb	r1, r1
 800053e:	4b0c      	ldr	r3, [pc, #48]	@ (8000570 <USART2_IRQHandler+0x50>)
 8000540:	5499      	strb	r1, [r3, r2]
        uart_head = (uart_head + 1) % UART_BUFFER_SIZE;//Actualiza el indice y evita desbordamiento
 8000542:	4b0a      	ldr	r3, [pc, #40]	@ (800056c <USART2_IRQHandler+0x4c>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	b2db      	uxtb	r3, r3
 8000548:	3301      	adds	r3, #1
 800054a:	4a0a      	ldr	r2, [pc, #40]	@ (8000574 <USART2_IRQHandler+0x54>)
 800054c:	4013      	ands	r3, r2
 800054e:	d504      	bpl.n	800055a <USART2_IRQHandler+0x3a>
 8000550:	3b01      	subs	r3, #1
 8000552:	2280      	movs	r2, #128	@ 0x80
 8000554:	4252      	negs	r2, r2
 8000556:	4313      	orrs	r3, r2
 8000558:	3301      	adds	r3, #1
 800055a:	b2da      	uxtb	r2, r3
 800055c:	4b03      	ldr	r3, [pc, #12]	@ (800056c <USART2_IRQHandler+0x4c>)
 800055e:	701a      	strb	r2, [r3, #0]
    }
}
 8000560:	46c0      	nop			@ (mov r8, r8)
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	46c0      	nop			@ (mov r8, r8)
 8000568:	40004400 	.word	0x40004400
 800056c:	200000ec 	.word	0x200000ec
 8000570:	2000006c 	.word	0x2000006c
 8000574:	8000007f 	.word	0x8000007f

08000578 <readCommand>:
void readCommand(void){
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
while(uart_head != uart_tail) {//Si tenemos datos nuevos
 800057e:	e03b      	b.n	80005f8 <readCommand+0x80>
	char c = uart_buffer[uart_tail];//Leemos el dato almacenado en el buffer
 8000580:	4b24      	ldr	r3, [pc, #144]	@ (8000614 <readCommand+0x9c>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b2db      	uxtb	r3, r3
 8000586:	0019      	movs	r1, r3
 8000588:	1dfb      	adds	r3, r7, #7
 800058a:	4a23      	ldr	r2, [pc, #140]	@ (8000618 <readCommand+0xa0>)
 800058c:	5c52      	ldrb	r2, [r2, r1]
 800058e:	701a      	strb	r2, [r3, #0]
	uart_tail = (uart_tail + 1) % UART_BUFFER_SIZE;//Actualizamos posición
 8000590:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <readCommand+0x9c>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	3301      	adds	r3, #1
 8000598:	4a20      	ldr	r2, [pc, #128]	@ (800061c <readCommand+0xa4>)
 800059a:	4013      	ands	r3, r2
 800059c:	d504      	bpl.n	80005a8 <readCommand+0x30>
 800059e:	3b01      	subs	r3, #1
 80005a0:	2280      	movs	r2, #128	@ 0x80
 80005a2:	4252      	negs	r2, r2
 80005a4:	4313      	orrs	r3, r2
 80005a6:	3301      	adds	r3, #1
 80005a8:	b2da      	uxtb	r2, r3
 80005aa:	4b1a      	ldr	r3, [pc, #104]	@ (8000614 <readCommand+0x9c>)
 80005ac:	701a      	strb	r2, [r3, #0]

	if(c == '\r' || c == '\n') {//Se detecta salto de linea
 80005ae:	1dfb      	adds	r3, r7, #7
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b0d      	cmp	r3, #13
 80005b4:	d003      	beq.n	80005be <readCommand+0x46>
 80005b6:	1dfb      	adds	r3, r7, #7
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	2b0a      	cmp	r3, #10
 80005bc:	d10d      	bne.n	80005da <readCommand+0x62>
		cmd_buffer[idx] = '\0';//Cierra la cadena para string válido
 80005be:	4b18      	ldr	r3, [pc, #96]	@ (8000620 <readCommand+0xa8>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	001a      	movs	r2, r3
 80005c4:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <readCommand+0xac>)
 80005c6:	2100      	movs	r1, #0
 80005c8:	5499      	strb	r1, [r3, r2]
		processCommand(cmd_buffer);//Procesa el comando
 80005ca:	4b16      	ldr	r3, [pc, #88]	@ (8000624 <readCommand+0xac>)
 80005cc:	0018      	movs	r0, r3
 80005ce:	f7ff fefd 	bl	80003cc <processCommand>
		idx = 0;//Reinicia el indice
 80005d2:	4b13      	ldr	r3, [pc, #76]	@ (8000620 <readCommand+0xa8>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	701a      	strb	r2, [r3, #0]
 80005d8:	e00e      	b.n	80005f8 <readCommand+0x80>
	}
	else if(idx < sizeof(cmd_buffer)-1) {//Evita overflow
 80005da:	4b11      	ldr	r3, [pc, #68]	@ (8000620 <readCommand+0xa8>)
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	2b1e      	cmp	r3, #30
 80005e0:	d80a      	bhi.n	80005f8 <readCommand+0x80>
		cmd_buffer[idx++] = c;//Guarda caracter en la posición y luego cambia posición
 80005e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <readCommand+0xa8>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	1c5a      	adds	r2, r3, #1
 80005e8:	b2d1      	uxtb	r1, r2
 80005ea:	4a0d      	ldr	r2, [pc, #52]	@ (8000620 <readCommand+0xa8>)
 80005ec:	7011      	strb	r1, [r2, #0]
 80005ee:	0019      	movs	r1, r3
 80005f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000624 <readCommand+0xac>)
 80005f2:	1dfa      	adds	r2, r7, #7
 80005f4:	7812      	ldrb	r2, [r2, #0]
 80005f6:	545a      	strb	r2, [r3, r1]
while(uart_head != uart_tail) {//Si tenemos datos nuevos
 80005f8:	4b0b      	ldr	r3, [pc, #44]	@ (8000628 <readCommand+0xb0>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	b2da      	uxtb	r2, r3
 80005fe:	4b05      	ldr	r3, [pc, #20]	@ (8000614 <readCommand+0x9c>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	b2db      	uxtb	r3, r3
 8000604:	429a      	cmp	r2, r3
 8000606:	d1bb      	bne.n	8000580 <readCommand+0x8>
	}
}}
 8000608:	46c0      	nop			@ (mov r8, r8)
 800060a:	46c0      	nop			@ (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b002      	add	sp, #8
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			@ (mov r8, r8)
 8000614:	200000ed 	.word	0x200000ed
 8000618:	2000006c 	.word	0x2000006c
 800061c:	8000007f 	.word	0x8000007f
 8000620:	20000110 	.word	0x20000110
 8000624:	200000f0 	.word	0x200000f0
 8000628:	200000ec 	.word	0x200000ec

0800062c <setDuty>:
 */

#include "setDuty.h";
#include "stm32f051x8.h"

void setDuty(uint8_t channel, uint8_t duty) {//Handler para pwm
 800062c:	b580      	push	{r7, lr}
 800062e:	b084      	sub	sp, #16
 8000630:	af00      	add	r7, sp, #0
 8000632:	0002      	movs	r2, r0
 8000634:	1dfb      	adds	r3, r7, #7
 8000636:	701a      	strb	r2, [r3, #0]
 8000638:	1dbb      	adds	r3, r7, #6
 800063a:	1c0a      	adds	r2, r1, #0
 800063c:	701a      	strb	r2, [r3, #0]
    if(duty > PWM_MAX_DUTY) duty = PWM_MAX_DUTY;//Evitamos overflow de ciclo
 800063e:	1dbb      	adds	r3, r7, #6
 8000640:	781b      	ldrb	r3, [r3, #0]
 8000642:	2b64      	cmp	r3, #100	@ 0x64
 8000644:	d902      	bls.n	800064c <setDuty+0x20>
 8000646:	1dbb      	adds	r3, r7, #6
 8000648:	2264      	movs	r2, #100	@ 0x64
 800064a:	701a      	strb	r2, [r3, #0]
    uint16_t value = duty * (TIM3->ARR + 1) / 100;//Ponemos el ciclo en escala de 0 a 100
 800064c:	1dbb      	adds	r3, r7, #6
 800064e:	781a      	ldrb	r2, [r3, #0]
 8000650:	4b22      	ldr	r3, [pc, #136]	@ (80006dc <setDuty+0xb0>)
 8000652:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000654:	3301      	adds	r3, #1
 8000656:	4353      	muls	r3, r2
 8000658:	2164      	movs	r1, #100	@ 0x64
 800065a:	0018      	movs	r0, r3
 800065c:	f7ff fd66 	bl	800012c <__udivsi3>
 8000660:	0003      	movs	r3, r0
 8000662:	001a      	movs	r2, r3
 8000664:	230e      	movs	r3, #14
 8000666:	18fb      	adds	r3, r7, r3
 8000668:	801a      	strh	r2, [r3, #0]

    switch(channel) {//Dependiendo el comando recibido
 800066a:	1dfb      	adds	r3, r7, #7
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b04      	cmp	r3, #4
 8000670:	d026      	beq.n	80006c0 <setDuty+0x94>
 8000672:	dc2f      	bgt.n	80006d4 <setDuty+0xa8>
 8000674:	2b03      	cmp	r3, #3
 8000676:	d019      	beq.n	80006ac <setDuty+0x80>
 8000678:	dc2c      	bgt.n	80006d4 <setDuty+0xa8>
 800067a:	2b01      	cmp	r3, #1
 800067c:	d002      	beq.n	8000684 <setDuty+0x58>
 800067e:	2b02      	cmp	r3, #2
 8000680:	d00a      	beq.n	8000698 <setDuty+0x6c>
        case 1: TIM3->CCR1 = value; TIM3->CCR3 = value; break;//Adelante
        case 2: TIM3->CCR2 = value; TIM3->CCR3 = value; break;//Derecha
        case 3: TIM3->CCR1 = value; TIM3->CCR4 = value; break;//Izquierda
        case 4: TIM3->CCR2 = value; TIM3->CCR4 = value; break;//Atras
    }
}
 8000682:	e027      	b.n	80006d4 <setDuty+0xa8>
        case 1: TIM3->CCR1 = value; TIM3->CCR3 = value; break;//Adelante
 8000684:	4b15      	ldr	r3, [pc, #84]	@ (80006dc <setDuty+0xb0>)
 8000686:	210e      	movs	r1, #14
 8000688:	187a      	adds	r2, r7, r1
 800068a:	8812      	ldrh	r2, [r2, #0]
 800068c:	635a      	str	r2, [r3, #52]	@ 0x34
 800068e:	4b13      	ldr	r3, [pc, #76]	@ (80006dc <setDuty+0xb0>)
 8000690:	187a      	adds	r2, r7, r1
 8000692:	8812      	ldrh	r2, [r2, #0]
 8000694:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000696:	e01d      	b.n	80006d4 <setDuty+0xa8>
        case 2: TIM3->CCR2 = value; TIM3->CCR3 = value; break;//Derecha
 8000698:	4b10      	ldr	r3, [pc, #64]	@ (80006dc <setDuty+0xb0>)
 800069a:	210e      	movs	r1, #14
 800069c:	187a      	adds	r2, r7, r1
 800069e:	8812      	ldrh	r2, [r2, #0]
 80006a0:	639a      	str	r2, [r3, #56]	@ 0x38
 80006a2:	4b0e      	ldr	r3, [pc, #56]	@ (80006dc <setDuty+0xb0>)
 80006a4:	187a      	adds	r2, r7, r1
 80006a6:	8812      	ldrh	r2, [r2, #0]
 80006a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80006aa:	e013      	b.n	80006d4 <setDuty+0xa8>
        case 3: TIM3->CCR1 = value; TIM3->CCR4 = value; break;//Izquierda
 80006ac:	4b0b      	ldr	r3, [pc, #44]	@ (80006dc <setDuty+0xb0>)
 80006ae:	210e      	movs	r1, #14
 80006b0:	187a      	adds	r2, r7, r1
 80006b2:	8812      	ldrh	r2, [r2, #0]
 80006b4:	635a      	str	r2, [r3, #52]	@ 0x34
 80006b6:	4b09      	ldr	r3, [pc, #36]	@ (80006dc <setDuty+0xb0>)
 80006b8:	187a      	adds	r2, r7, r1
 80006ba:	8812      	ldrh	r2, [r2, #0]
 80006bc:	641a      	str	r2, [r3, #64]	@ 0x40
 80006be:	e009      	b.n	80006d4 <setDuty+0xa8>
        case 4: TIM3->CCR2 = value; TIM3->CCR4 = value; break;//Atras
 80006c0:	4b06      	ldr	r3, [pc, #24]	@ (80006dc <setDuty+0xb0>)
 80006c2:	210e      	movs	r1, #14
 80006c4:	187a      	adds	r2, r7, r1
 80006c6:	8812      	ldrh	r2, [r2, #0]
 80006c8:	639a      	str	r2, [r3, #56]	@ 0x38
 80006ca:	4b04      	ldr	r3, [pc, #16]	@ (80006dc <setDuty+0xb0>)
 80006cc:	187a      	adds	r2, r7, r1
 80006ce:	8812      	ldrh	r2, [r2, #0]
 80006d0:	641a      	str	r2, [r3, #64]	@ 0x40
 80006d2:	46c0      	nop			@ (mov r8, r8)
}
 80006d4:	46c0      	nop			@ (mov r8, r8)
 80006d6:	46bd      	mov	sp, r7
 80006d8:	b004      	add	sp, #16
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	40000400 	.word	0x40000400

080006e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b086      	sub	sp, #24
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80006e8:	4a14      	ldr	r2, [pc, #80]	@ (800073c <_sbrk+0x5c>)
 80006ea:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <_sbrk+0x60>)
 80006ec:	1ad3      	subs	r3, r2, r3
 80006ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80006f4:	4b13      	ldr	r3, [pc, #76]	@ (8000744 <_sbrk+0x64>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d102      	bne.n	8000702 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80006fc:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <_sbrk+0x64>)
 80006fe:	4a12      	ldr	r2, [pc, #72]	@ (8000748 <_sbrk+0x68>)
 8000700:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000702:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <_sbrk+0x64>)
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	18d3      	adds	r3, r2, r3
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	429a      	cmp	r2, r3
 800070e:	d207      	bcs.n	8000720 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000710:	f000 f872 	bl	80007f8 <__errno>
 8000714:	0003      	movs	r3, r0
 8000716:	220c      	movs	r2, #12
 8000718:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800071a:	2301      	movs	r3, #1
 800071c:	425b      	negs	r3, r3
 800071e:	e009      	b.n	8000734 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000720:	4b08      	ldr	r3, [pc, #32]	@ (8000744 <_sbrk+0x64>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000726:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <_sbrk+0x64>)
 8000728:	681a      	ldr	r2, [r3, #0]
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	18d2      	adds	r2, r2, r3
 800072e:	4b05      	ldr	r3, [pc, #20]	@ (8000744 <_sbrk+0x64>)
 8000730:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000732:	68fb      	ldr	r3, [r7, #12]
}
 8000734:	0018      	movs	r0, r3
 8000736:	46bd      	mov	sp, r7
 8000738:	b006      	add	sp, #24
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20002000 	.word	0x20002000
 8000740:	00000400 	.word	0x00000400
 8000744:	20000114 	.word	0x20000114
 8000748:	20000260 	.word	0x20000260

0800074c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800074c:	480d      	ldr	r0, [pc, #52]	@ (8000784 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800074e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000750:	e000      	b.n	8000754 <Reset_Handler+0x8>
 8000752:	bf00      	nop

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000754:	480c      	ldr	r0, [pc, #48]	@ (8000788 <LoopForever+0x6>)
  ldr r1, =_edata
 8000756:	490d      	ldr	r1, [pc, #52]	@ (800078c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000758:	4a0d      	ldr	r2, [pc, #52]	@ (8000790 <LoopForever+0xe>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800075c:	e002      	b.n	8000764 <LoopCopyDataInit>

0800075e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800075e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000762:	3304      	adds	r3, #4

08000764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000768:	d3f9      	bcc.n	800075e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800076a:	4a0a      	ldr	r2, [pc, #40]	@ (8000794 <LoopForever+0x12>)
  ldr r4, =_ebss
 800076c:	4c0a      	ldr	r4, [pc, #40]	@ (8000798 <LoopForever+0x16>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000770:	e001      	b.n	8000776 <LoopFillZerobss>

08000772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000774:	3204      	adds	r2, #4

08000776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000778:	d3fb      	bcc.n	8000772 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800077a:	f000 f843 	bl	8000804 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800077e:	f7ff fe19 	bl	80003b4 <main>

08000782 <LoopForever>:

LoopForever:
  b LoopForever
 8000782:	e7fe      	b.n	8000782 <LoopForever>
  ldr   r0, =_estack
 8000784:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000788:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800078c:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000790:	080015b0 	.word	0x080015b0
  ldr r2, =_sbss
 8000794:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000798:	20000260 	.word	0x20000260

0800079c <ADC_COMP_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800079c:	e7fe      	b.n	800079c <ADC_COMP_IRQHandler>
	...

080007a0 <siscanf>:
 80007a0:	b40e      	push	{r1, r2, r3}
 80007a2:	b570      	push	{r4, r5, r6, lr}
 80007a4:	2381      	movs	r3, #129	@ 0x81
 80007a6:	b09d      	sub	sp, #116	@ 0x74
 80007a8:	466a      	mov	r2, sp
 80007aa:	2500      	movs	r5, #0
 80007ac:	ac21      	add	r4, sp, #132	@ 0x84
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	cc40      	ldmia	r4!, {r6}
 80007b2:	8293      	strh	r3, [r2, #20]
 80007b4:	951b      	str	r5, [sp, #108]	@ 0x6c
 80007b6:	9002      	str	r0, [sp, #8]
 80007b8:	9006      	str	r0, [sp, #24]
 80007ba:	f7ff fca5 	bl	8000108 <strlen>
 80007be:	4b0b      	ldr	r3, [pc, #44]	@ (80007ec <siscanf+0x4c>)
 80007c0:	466a      	mov	r2, sp
 80007c2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80007c4:	2301      	movs	r3, #1
 80007c6:	9003      	str	r0, [sp, #12]
 80007c8:	9007      	str	r0, [sp, #28]
 80007ca:	4809      	ldr	r0, [pc, #36]	@ (80007f0 <siscanf+0x50>)
 80007cc:	425b      	negs	r3, r3
 80007ce:	82d3      	strh	r3, [r2, #22]
 80007d0:	a902      	add	r1, sp, #8
 80007d2:	0023      	movs	r3, r4
 80007d4:	0032      	movs	r2, r6
 80007d6:	6800      	ldr	r0, [r0, #0]
 80007d8:	950f      	str	r5, [sp, #60]	@ 0x3c
 80007da:	9514      	str	r5, [sp, #80]	@ 0x50
 80007dc:	9401      	str	r4, [sp, #4]
 80007de:	f000 f98f 	bl	8000b00 <__ssvfiscanf_r>
 80007e2:	b01d      	add	sp, #116	@ 0x74
 80007e4:	bc70      	pop	{r4, r5, r6}
 80007e6:	bc08      	pop	{r3}
 80007e8:	b003      	add	sp, #12
 80007ea:	4718      	bx	r3
 80007ec:	080007f5 	.word	0x080007f5
 80007f0:	20000000 	.word	0x20000000

080007f4 <__seofread>:
 80007f4:	2000      	movs	r0, #0
 80007f6:	4770      	bx	lr

080007f8 <__errno>:
 80007f8:	4b01      	ldr	r3, [pc, #4]	@ (8000800 <__errno+0x8>)
 80007fa:	6818      	ldr	r0, [r3, #0]
 80007fc:	4770      	bx	lr
 80007fe:	46c0      	nop			@ (mov r8, r8)
 8000800:	20000000 	.word	0x20000000

08000804 <__libc_init_array>:
 8000804:	b570      	push	{r4, r5, r6, lr}
 8000806:	2600      	movs	r6, #0
 8000808:	4c0c      	ldr	r4, [pc, #48]	@ (800083c <__libc_init_array+0x38>)
 800080a:	4d0d      	ldr	r5, [pc, #52]	@ (8000840 <__libc_init_array+0x3c>)
 800080c:	1b64      	subs	r4, r4, r5
 800080e:	10a4      	asrs	r4, r4, #2
 8000810:	42a6      	cmp	r6, r4
 8000812:	d109      	bne.n	8000828 <__libc_init_array+0x24>
 8000814:	2600      	movs	r6, #0
 8000816:	f000 fe21 	bl	800145c <_init>
 800081a:	4c0a      	ldr	r4, [pc, #40]	@ (8000844 <__libc_init_array+0x40>)
 800081c:	4d0a      	ldr	r5, [pc, #40]	@ (8000848 <__libc_init_array+0x44>)
 800081e:	1b64      	subs	r4, r4, r5
 8000820:	10a4      	asrs	r4, r4, #2
 8000822:	42a6      	cmp	r6, r4
 8000824:	d105      	bne.n	8000832 <__libc_init_array+0x2e>
 8000826:	bd70      	pop	{r4, r5, r6, pc}
 8000828:	00b3      	lsls	r3, r6, #2
 800082a:	58eb      	ldr	r3, [r5, r3]
 800082c:	4798      	blx	r3
 800082e:	3601      	adds	r6, #1
 8000830:	e7ee      	b.n	8000810 <__libc_init_array+0xc>
 8000832:	00b3      	lsls	r3, r6, #2
 8000834:	58eb      	ldr	r3, [r5, r3]
 8000836:	4798      	blx	r3
 8000838:	3601      	adds	r6, #1
 800083a:	e7f2      	b.n	8000822 <__libc_init_array+0x1e>
 800083c:	080015a8 	.word	0x080015a8
 8000840:	080015a8 	.word	0x080015a8
 8000844:	080015ac 	.word	0x080015ac
 8000848:	080015a8 	.word	0x080015a8

0800084c <__retarget_lock_acquire_recursive>:
 800084c:	4770      	bx	lr

0800084e <__retarget_lock_release_recursive>:
 800084e:	4770      	bx	lr

08000850 <_free_r>:
 8000850:	b570      	push	{r4, r5, r6, lr}
 8000852:	0005      	movs	r5, r0
 8000854:	1e0c      	subs	r4, r1, #0
 8000856:	d010      	beq.n	800087a <_free_r+0x2a>
 8000858:	3c04      	subs	r4, #4
 800085a:	6823      	ldr	r3, [r4, #0]
 800085c:	2b00      	cmp	r3, #0
 800085e:	da00      	bge.n	8000862 <_free_r+0x12>
 8000860:	18e4      	adds	r4, r4, r3
 8000862:	0028      	movs	r0, r5
 8000864:	f000 f8e0 	bl	8000a28 <__malloc_lock>
 8000868:	4a1d      	ldr	r2, [pc, #116]	@ (80008e0 <_free_r+0x90>)
 800086a:	6813      	ldr	r3, [r2, #0]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d105      	bne.n	800087c <_free_r+0x2c>
 8000870:	6063      	str	r3, [r4, #4]
 8000872:	6014      	str	r4, [r2, #0]
 8000874:	0028      	movs	r0, r5
 8000876:	f000 f8df 	bl	8000a38 <__malloc_unlock>
 800087a:	bd70      	pop	{r4, r5, r6, pc}
 800087c:	42a3      	cmp	r3, r4
 800087e:	d908      	bls.n	8000892 <_free_r+0x42>
 8000880:	6820      	ldr	r0, [r4, #0]
 8000882:	1821      	adds	r1, r4, r0
 8000884:	428b      	cmp	r3, r1
 8000886:	d1f3      	bne.n	8000870 <_free_r+0x20>
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	685b      	ldr	r3, [r3, #4]
 800088c:	1809      	adds	r1, r1, r0
 800088e:	6021      	str	r1, [r4, #0]
 8000890:	e7ee      	b.n	8000870 <_free_r+0x20>
 8000892:	001a      	movs	r2, r3
 8000894:	685b      	ldr	r3, [r3, #4]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <_free_r+0x4e>
 800089a:	42a3      	cmp	r3, r4
 800089c:	d9f9      	bls.n	8000892 <_free_r+0x42>
 800089e:	6811      	ldr	r1, [r2, #0]
 80008a0:	1850      	adds	r0, r2, r1
 80008a2:	42a0      	cmp	r0, r4
 80008a4:	d10b      	bne.n	80008be <_free_r+0x6e>
 80008a6:	6820      	ldr	r0, [r4, #0]
 80008a8:	1809      	adds	r1, r1, r0
 80008aa:	1850      	adds	r0, r2, r1
 80008ac:	6011      	str	r1, [r2, #0]
 80008ae:	4283      	cmp	r3, r0
 80008b0:	d1e0      	bne.n	8000874 <_free_r+0x24>
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
 80008b6:	1841      	adds	r1, r0, r1
 80008b8:	6011      	str	r1, [r2, #0]
 80008ba:	6053      	str	r3, [r2, #4]
 80008bc:	e7da      	b.n	8000874 <_free_r+0x24>
 80008be:	42a0      	cmp	r0, r4
 80008c0:	d902      	bls.n	80008c8 <_free_r+0x78>
 80008c2:	230c      	movs	r3, #12
 80008c4:	602b      	str	r3, [r5, #0]
 80008c6:	e7d5      	b.n	8000874 <_free_r+0x24>
 80008c8:	6820      	ldr	r0, [r4, #0]
 80008ca:	1821      	adds	r1, r4, r0
 80008cc:	428b      	cmp	r3, r1
 80008ce:	d103      	bne.n	80008d8 <_free_r+0x88>
 80008d0:	6819      	ldr	r1, [r3, #0]
 80008d2:	685b      	ldr	r3, [r3, #4]
 80008d4:	1809      	adds	r1, r1, r0
 80008d6:	6021      	str	r1, [r4, #0]
 80008d8:	6063      	str	r3, [r4, #4]
 80008da:	6054      	str	r4, [r2, #4]
 80008dc:	e7ca      	b.n	8000874 <_free_r+0x24>
 80008de:	46c0      	nop			@ (mov r8, r8)
 80008e0:	2000025c 	.word	0x2000025c

080008e4 <sbrk_aligned>:
 80008e4:	b570      	push	{r4, r5, r6, lr}
 80008e6:	4e0f      	ldr	r6, [pc, #60]	@ (8000924 <sbrk_aligned+0x40>)
 80008e8:	000d      	movs	r5, r1
 80008ea:	6831      	ldr	r1, [r6, #0]
 80008ec:	0004      	movs	r4, r0
 80008ee:	2900      	cmp	r1, #0
 80008f0:	d102      	bne.n	80008f8 <sbrk_aligned+0x14>
 80008f2:	f000 fc41 	bl	8001178 <_sbrk_r>
 80008f6:	6030      	str	r0, [r6, #0]
 80008f8:	0029      	movs	r1, r5
 80008fa:	0020      	movs	r0, r4
 80008fc:	f000 fc3c 	bl	8001178 <_sbrk_r>
 8000900:	1c43      	adds	r3, r0, #1
 8000902:	d103      	bne.n	800090c <sbrk_aligned+0x28>
 8000904:	2501      	movs	r5, #1
 8000906:	426d      	negs	r5, r5
 8000908:	0028      	movs	r0, r5
 800090a:	bd70      	pop	{r4, r5, r6, pc}
 800090c:	2303      	movs	r3, #3
 800090e:	1cc5      	adds	r5, r0, #3
 8000910:	439d      	bics	r5, r3
 8000912:	42a8      	cmp	r0, r5
 8000914:	d0f8      	beq.n	8000908 <sbrk_aligned+0x24>
 8000916:	1a29      	subs	r1, r5, r0
 8000918:	0020      	movs	r0, r4
 800091a:	f000 fc2d 	bl	8001178 <_sbrk_r>
 800091e:	3001      	adds	r0, #1
 8000920:	d1f2      	bne.n	8000908 <sbrk_aligned+0x24>
 8000922:	e7ef      	b.n	8000904 <sbrk_aligned+0x20>
 8000924:	20000258 	.word	0x20000258

08000928 <_malloc_r>:
 8000928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800092a:	2203      	movs	r2, #3
 800092c:	1ccb      	adds	r3, r1, #3
 800092e:	4393      	bics	r3, r2
 8000930:	3308      	adds	r3, #8
 8000932:	0005      	movs	r5, r0
 8000934:	001f      	movs	r7, r3
 8000936:	2b0c      	cmp	r3, #12
 8000938:	d234      	bcs.n	80009a4 <_malloc_r+0x7c>
 800093a:	270c      	movs	r7, #12
 800093c:	42b9      	cmp	r1, r7
 800093e:	d833      	bhi.n	80009a8 <_malloc_r+0x80>
 8000940:	0028      	movs	r0, r5
 8000942:	f000 f871 	bl	8000a28 <__malloc_lock>
 8000946:	4e37      	ldr	r6, [pc, #220]	@ (8000a24 <_malloc_r+0xfc>)
 8000948:	6833      	ldr	r3, [r6, #0]
 800094a:	001c      	movs	r4, r3
 800094c:	2c00      	cmp	r4, #0
 800094e:	d12f      	bne.n	80009b0 <_malloc_r+0x88>
 8000950:	0039      	movs	r1, r7
 8000952:	0028      	movs	r0, r5
 8000954:	f7ff ffc6 	bl	80008e4 <sbrk_aligned>
 8000958:	0004      	movs	r4, r0
 800095a:	1c43      	adds	r3, r0, #1
 800095c:	d15f      	bne.n	8000a1e <_malloc_r+0xf6>
 800095e:	6834      	ldr	r4, [r6, #0]
 8000960:	9400      	str	r4, [sp, #0]
 8000962:	9b00      	ldr	r3, [sp, #0]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d14a      	bne.n	80009fe <_malloc_r+0xd6>
 8000968:	2c00      	cmp	r4, #0
 800096a:	d052      	beq.n	8000a12 <_malloc_r+0xea>
 800096c:	6823      	ldr	r3, [r4, #0]
 800096e:	0028      	movs	r0, r5
 8000970:	18e3      	adds	r3, r4, r3
 8000972:	9900      	ldr	r1, [sp, #0]
 8000974:	9301      	str	r3, [sp, #4]
 8000976:	f000 fbff 	bl	8001178 <_sbrk_r>
 800097a:	9b01      	ldr	r3, [sp, #4]
 800097c:	4283      	cmp	r3, r0
 800097e:	d148      	bne.n	8000a12 <_malloc_r+0xea>
 8000980:	6823      	ldr	r3, [r4, #0]
 8000982:	0028      	movs	r0, r5
 8000984:	1aff      	subs	r7, r7, r3
 8000986:	0039      	movs	r1, r7
 8000988:	f7ff ffac 	bl	80008e4 <sbrk_aligned>
 800098c:	3001      	adds	r0, #1
 800098e:	d040      	beq.n	8000a12 <_malloc_r+0xea>
 8000990:	6823      	ldr	r3, [r4, #0]
 8000992:	19db      	adds	r3, r3, r7
 8000994:	6023      	str	r3, [r4, #0]
 8000996:	6833      	ldr	r3, [r6, #0]
 8000998:	685a      	ldr	r2, [r3, #4]
 800099a:	2a00      	cmp	r2, #0
 800099c:	d133      	bne.n	8000a06 <_malloc_r+0xde>
 800099e:	9b00      	ldr	r3, [sp, #0]
 80009a0:	6033      	str	r3, [r6, #0]
 80009a2:	e019      	b.n	80009d8 <_malloc_r+0xb0>
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	dac9      	bge.n	800093c <_malloc_r+0x14>
 80009a8:	230c      	movs	r3, #12
 80009aa:	602b      	str	r3, [r5, #0]
 80009ac:	2000      	movs	r0, #0
 80009ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80009b0:	6821      	ldr	r1, [r4, #0]
 80009b2:	1bc9      	subs	r1, r1, r7
 80009b4:	d420      	bmi.n	80009f8 <_malloc_r+0xd0>
 80009b6:	290b      	cmp	r1, #11
 80009b8:	d90a      	bls.n	80009d0 <_malloc_r+0xa8>
 80009ba:	19e2      	adds	r2, r4, r7
 80009bc:	6027      	str	r7, [r4, #0]
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d104      	bne.n	80009cc <_malloc_r+0xa4>
 80009c2:	6032      	str	r2, [r6, #0]
 80009c4:	6863      	ldr	r3, [r4, #4]
 80009c6:	6011      	str	r1, [r2, #0]
 80009c8:	6053      	str	r3, [r2, #4]
 80009ca:	e005      	b.n	80009d8 <_malloc_r+0xb0>
 80009cc:	605a      	str	r2, [r3, #4]
 80009ce:	e7f9      	b.n	80009c4 <_malloc_r+0x9c>
 80009d0:	6862      	ldr	r2, [r4, #4]
 80009d2:	42a3      	cmp	r3, r4
 80009d4:	d10e      	bne.n	80009f4 <_malloc_r+0xcc>
 80009d6:	6032      	str	r2, [r6, #0]
 80009d8:	0028      	movs	r0, r5
 80009da:	f000 f82d 	bl	8000a38 <__malloc_unlock>
 80009de:	0020      	movs	r0, r4
 80009e0:	2207      	movs	r2, #7
 80009e2:	300b      	adds	r0, #11
 80009e4:	1d23      	adds	r3, r4, #4
 80009e6:	4390      	bics	r0, r2
 80009e8:	1ac2      	subs	r2, r0, r3
 80009ea:	4298      	cmp	r0, r3
 80009ec:	d0df      	beq.n	80009ae <_malloc_r+0x86>
 80009ee:	1a1b      	subs	r3, r3, r0
 80009f0:	50a3      	str	r3, [r4, r2]
 80009f2:	e7dc      	b.n	80009ae <_malloc_r+0x86>
 80009f4:	605a      	str	r2, [r3, #4]
 80009f6:	e7ef      	b.n	80009d8 <_malloc_r+0xb0>
 80009f8:	0023      	movs	r3, r4
 80009fa:	6864      	ldr	r4, [r4, #4]
 80009fc:	e7a6      	b.n	800094c <_malloc_r+0x24>
 80009fe:	9c00      	ldr	r4, [sp, #0]
 8000a00:	6863      	ldr	r3, [r4, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	e7ad      	b.n	8000962 <_malloc_r+0x3a>
 8000a06:	001a      	movs	r2, r3
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	42a3      	cmp	r3, r4
 8000a0c:	d1fb      	bne.n	8000a06 <_malloc_r+0xde>
 8000a0e:	2300      	movs	r3, #0
 8000a10:	e7da      	b.n	80009c8 <_malloc_r+0xa0>
 8000a12:	230c      	movs	r3, #12
 8000a14:	0028      	movs	r0, r5
 8000a16:	602b      	str	r3, [r5, #0]
 8000a18:	f000 f80e 	bl	8000a38 <__malloc_unlock>
 8000a1c:	e7c6      	b.n	80009ac <_malloc_r+0x84>
 8000a1e:	6007      	str	r7, [r0, #0]
 8000a20:	e7da      	b.n	80009d8 <_malloc_r+0xb0>
 8000a22:	46c0      	nop			@ (mov r8, r8)
 8000a24:	2000025c 	.word	0x2000025c

08000a28 <__malloc_lock>:
 8000a28:	b510      	push	{r4, lr}
 8000a2a:	4802      	ldr	r0, [pc, #8]	@ (8000a34 <__malloc_lock+0xc>)
 8000a2c:	f7ff ff0e 	bl	800084c <__retarget_lock_acquire_recursive>
 8000a30:	bd10      	pop	{r4, pc}
 8000a32:	46c0      	nop			@ (mov r8, r8)
 8000a34:	20000254 	.word	0x20000254

08000a38 <__malloc_unlock>:
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	4802      	ldr	r0, [pc, #8]	@ (8000a44 <__malloc_unlock+0xc>)
 8000a3c:	f7ff ff07 	bl	800084e <__retarget_lock_release_recursive>
 8000a40:	bd10      	pop	{r4, pc}
 8000a42:	46c0      	nop			@ (mov r8, r8)
 8000a44:	20000254 	.word	0x20000254

08000a48 <_sungetc_r>:
 8000a48:	b570      	push	{r4, r5, r6, lr}
 8000a4a:	0014      	movs	r4, r2
 8000a4c:	1c4b      	adds	r3, r1, #1
 8000a4e:	d103      	bne.n	8000a58 <_sungetc_r+0x10>
 8000a50:	2501      	movs	r5, #1
 8000a52:	426d      	negs	r5, r5
 8000a54:	0028      	movs	r0, r5
 8000a56:	bd70      	pop	{r4, r5, r6, pc}
 8000a58:	8993      	ldrh	r3, [r2, #12]
 8000a5a:	2220      	movs	r2, #32
 8000a5c:	4393      	bics	r3, r2
 8000a5e:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8000a60:	81a3      	strh	r3, [r4, #12]
 8000a62:	b2ce      	uxtb	r6, r1
 8000a64:	6863      	ldr	r3, [r4, #4]
 8000a66:	b2cd      	uxtb	r5, r1
 8000a68:	2a00      	cmp	r2, #0
 8000a6a:	d010      	beq.n	8000a8e <_sungetc_r+0x46>
 8000a6c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	dd07      	ble.n	8000a82 <_sungetc_r+0x3a>
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	3b01      	subs	r3, #1
 8000a76:	6023      	str	r3, [r4, #0]
 8000a78:	701e      	strb	r6, [r3, #0]
 8000a7a:	6863      	ldr	r3, [r4, #4]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	6063      	str	r3, [r4, #4]
 8000a80:	e7e8      	b.n	8000a54 <_sungetc_r+0xc>
 8000a82:	0021      	movs	r1, r4
 8000a84:	f000 fb3a 	bl	80010fc <__submore>
 8000a88:	2800      	cmp	r0, #0
 8000a8a:	d0f2      	beq.n	8000a72 <_sungetc_r+0x2a>
 8000a8c:	e7e0      	b.n	8000a50 <_sungetc_r+0x8>
 8000a8e:	6921      	ldr	r1, [r4, #16]
 8000a90:	6822      	ldr	r2, [r4, #0]
 8000a92:	2900      	cmp	r1, #0
 8000a94:	d007      	beq.n	8000aa6 <_sungetc_r+0x5e>
 8000a96:	4291      	cmp	r1, r2
 8000a98:	d205      	bcs.n	8000aa6 <_sungetc_r+0x5e>
 8000a9a:	1e51      	subs	r1, r2, #1
 8000a9c:	7808      	ldrb	r0, [r1, #0]
 8000a9e:	42a8      	cmp	r0, r5
 8000aa0:	d101      	bne.n	8000aa6 <_sungetc_r+0x5e>
 8000aa2:	6021      	str	r1, [r4, #0]
 8000aa4:	e7ea      	b.n	8000a7c <_sungetc_r+0x34>
 8000aa6:	6423      	str	r3, [r4, #64]	@ 0x40
 8000aa8:	0023      	movs	r3, r4
 8000aaa:	3344      	adds	r3, #68	@ 0x44
 8000aac:	6363      	str	r3, [r4, #52]	@ 0x34
 8000aae:	2303      	movs	r3, #3
 8000ab0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8000ab2:	0023      	movs	r3, r4
 8000ab4:	3346      	adds	r3, #70	@ 0x46
 8000ab6:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8000ab8:	701e      	strb	r6, [r3, #0]
 8000aba:	6023      	str	r3, [r4, #0]
 8000abc:	2301      	movs	r3, #1
 8000abe:	e7de      	b.n	8000a7e <_sungetc_r+0x36>

08000ac0 <__ssrefill_r>:
 8000ac0:	b510      	push	{r4, lr}
 8000ac2:	000c      	movs	r4, r1
 8000ac4:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8000ac6:	2900      	cmp	r1, #0
 8000ac8:	d00e      	beq.n	8000ae8 <__ssrefill_r+0x28>
 8000aca:	0023      	movs	r3, r4
 8000acc:	3344      	adds	r3, #68	@ 0x44
 8000ace:	4299      	cmp	r1, r3
 8000ad0:	d001      	beq.n	8000ad6 <__ssrefill_r+0x16>
 8000ad2:	f7ff febd 	bl	8000850 <_free_r>
 8000ad6:	2000      	movs	r0, #0
 8000ad8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000ada:	6360      	str	r0, [r4, #52]	@ 0x34
 8000adc:	6063      	str	r3, [r4, #4]
 8000ade:	4283      	cmp	r3, r0
 8000ae0:	d002      	beq.n	8000ae8 <__ssrefill_r+0x28>
 8000ae2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8000ae4:	6023      	str	r3, [r4, #0]
 8000ae6:	bd10      	pop	{r4, pc}
 8000ae8:	6923      	ldr	r3, [r4, #16]
 8000aea:	2001      	movs	r0, #1
 8000aec:	6023      	str	r3, [r4, #0]
 8000aee:	2300      	movs	r3, #0
 8000af0:	89a2      	ldrh	r2, [r4, #12]
 8000af2:	6063      	str	r3, [r4, #4]
 8000af4:	3320      	adds	r3, #32
 8000af6:	4313      	orrs	r3, r2
 8000af8:	81a3      	strh	r3, [r4, #12]
 8000afa:	4240      	negs	r0, r0
 8000afc:	e7f3      	b.n	8000ae6 <__ssrefill_r+0x26>
	...

08000b00 <__ssvfiscanf_r>:
 8000b00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b02:	4cab      	ldr	r4, [pc, #684]	@ (8000db0 <__ssvfiscanf_r+0x2b0>)
 8000b04:	44a5      	add	sp, r4
 8000b06:	000c      	movs	r4, r1
 8000b08:	2100      	movs	r1, #0
 8000b0a:	9000      	str	r0, [sp, #0]
 8000b0c:	20be      	movs	r0, #190	@ 0xbe
 8000b0e:	9146      	str	r1, [sp, #280]	@ 0x118
 8000b10:	9147      	str	r1, [sp, #284]	@ 0x11c
 8000b12:	a903      	add	r1, sp, #12
 8000b14:	9148      	str	r1, [sp, #288]	@ 0x120
 8000b16:	49a7      	ldr	r1, [pc, #668]	@ (8000db4 <__ssvfiscanf_r+0x2b4>)
 8000b18:	0040      	lsls	r0, r0, #1
 8000b1a:	ad43      	add	r5, sp, #268	@ 0x10c
 8000b1c:	5029      	str	r1, [r5, r0]
 8000b1e:	49a6      	ldr	r1, [pc, #664]	@ (8000db8 <__ssvfiscanf_r+0x2b8>)
 8000b20:	3004      	adds	r0, #4
 8000b22:	ad43      	add	r5, sp, #268	@ 0x10c
 8000b24:	5029      	str	r1, [r5, r0]
 8000b26:	9302      	str	r3, [sp, #8]
 8000b28:	7816      	ldrb	r6, [r2, #0]
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d100      	bne.n	8000b30 <__ssvfiscanf_r+0x30>
 8000b2e:	e13c      	b.n	8000daa <__ssvfiscanf_r+0x2aa>
 8000b30:	2308      	movs	r3, #8
 8000b32:	2008      	movs	r0, #8
 8000b34:	4da1      	ldr	r5, [pc, #644]	@ (8000dbc <__ssvfiscanf_r+0x2bc>)
 8000b36:	1c57      	adds	r7, r2, #1
 8000b38:	5da9      	ldrb	r1, [r5, r6]
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	4201      	tst	r1, r0
 8000b3e:	d01d      	beq.n	8000b7c <__ssvfiscanf_r+0x7c>
 8000b40:	0006      	movs	r6, r0
 8000b42:	6863      	ldr	r3, [r4, #4]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	dd0f      	ble.n	8000b68 <__ssvfiscanf_r+0x68>
 8000b48:	6823      	ldr	r3, [r4, #0]
 8000b4a:	781a      	ldrb	r2, [r3, #0]
 8000b4c:	5caa      	ldrb	r2, [r5, r2]
 8000b4e:	4232      	tst	r2, r6
 8000b50:	d101      	bne.n	8000b56 <__ssvfiscanf_r+0x56>
 8000b52:	003a      	movs	r2, r7
 8000b54:	e7e8      	b.n	8000b28 <__ssvfiscanf_r+0x28>
 8000b56:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8000b58:	3301      	adds	r3, #1
 8000b5a:	3201      	adds	r2, #1
 8000b5c:	9247      	str	r2, [sp, #284]	@ 0x11c
 8000b5e:	6862      	ldr	r2, [r4, #4]
 8000b60:	6023      	str	r3, [r4, #0]
 8000b62:	3a01      	subs	r2, #1
 8000b64:	6062      	str	r2, [r4, #4]
 8000b66:	e7ec      	b.n	8000b42 <__ssvfiscanf_r+0x42>
 8000b68:	22c0      	movs	r2, #192	@ 0xc0
 8000b6a:	ab43      	add	r3, sp, #268	@ 0x10c
 8000b6c:	0052      	lsls	r2, r2, #1
 8000b6e:	0021      	movs	r1, r4
 8000b70:	589b      	ldr	r3, [r3, r2]
 8000b72:	9800      	ldr	r0, [sp, #0]
 8000b74:	4798      	blx	r3
 8000b76:	2800      	cmp	r0, #0
 8000b78:	d0e6      	beq.n	8000b48 <__ssvfiscanf_r+0x48>
 8000b7a:	e7ea      	b.n	8000b52 <__ssvfiscanf_r+0x52>
 8000b7c:	2e25      	cmp	r6, #37	@ 0x25
 8000b7e:	d162      	bne.n	8000c46 <__ssvfiscanf_r+0x146>
 8000b80:	9345      	str	r3, [sp, #276]	@ 0x114
 8000b82:	9343      	str	r3, [sp, #268]	@ 0x10c
 8000b84:	7853      	ldrb	r3, [r2, #1]
 8000b86:	2b2a      	cmp	r3, #42	@ 0x2a
 8000b88:	d102      	bne.n	8000b90 <__ssvfiscanf_r+0x90>
 8000b8a:	3b1a      	subs	r3, #26
 8000b8c:	9343      	str	r3, [sp, #268]	@ 0x10c
 8000b8e:	1c97      	adds	r7, r2, #2
 8000b90:	003d      	movs	r5, r7
 8000b92:	220a      	movs	r2, #10
 8000b94:	7829      	ldrb	r1, [r5, #0]
 8000b96:	1c6f      	adds	r7, r5, #1
 8000b98:	000b      	movs	r3, r1
 8000b9a:	3b30      	subs	r3, #48	@ 0x30
 8000b9c:	2b09      	cmp	r3, #9
 8000b9e:	d91f      	bls.n	8000be0 <__ssvfiscanf_r+0xe0>
 8000ba0:	4b87      	ldr	r3, [pc, #540]	@ (8000dc0 <__ssvfiscanf_r+0x2c0>)
 8000ba2:	2203      	movs	r2, #3
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	9301      	str	r3, [sp, #4]
 8000ba8:	f000 faf8 	bl	800119c <memchr>
 8000bac:	2800      	cmp	r0, #0
 8000bae:	d007      	beq.n	8000bc0 <__ssvfiscanf_r+0xc0>
 8000bb0:	9b01      	ldr	r3, [sp, #4]
 8000bb2:	003d      	movs	r5, r7
 8000bb4:	1ac0      	subs	r0, r0, r3
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	4083      	lsls	r3, r0
 8000bba:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	9343      	str	r3, [sp, #268]	@ 0x10c
 8000bc0:	782b      	ldrb	r3, [r5, #0]
 8000bc2:	1c6f      	adds	r7, r5, #1
 8000bc4:	2b78      	cmp	r3, #120	@ 0x78
 8000bc6:	d806      	bhi.n	8000bd6 <__ssvfiscanf_r+0xd6>
 8000bc8:	2b57      	cmp	r3, #87	@ 0x57
 8000bca:	d810      	bhi.n	8000bee <__ssvfiscanf_r+0xee>
 8000bcc:	2b25      	cmp	r3, #37	@ 0x25
 8000bce:	d03a      	beq.n	8000c46 <__ssvfiscanf_r+0x146>
 8000bd0:	d834      	bhi.n	8000c3c <__ssvfiscanf_r+0x13c>
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d055      	beq.n	8000c82 <__ssvfiscanf_r+0x182>
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	9349      	str	r3, [sp, #292]	@ 0x124
 8000bda:	3307      	adds	r3, #7
 8000bdc:	9344      	str	r3, [sp, #272]	@ 0x110
 8000bde:	e069      	b.n	8000cb4 <__ssvfiscanf_r+0x1b4>
 8000be0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8000be2:	003d      	movs	r5, r7
 8000be4:	4353      	muls	r3, r2
 8000be6:	3b30      	subs	r3, #48	@ 0x30
 8000be8:	185b      	adds	r3, r3, r1
 8000bea:	9345      	str	r3, [sp, #276]	@ 0x114
 8000bec:	e7d2      	b.n	8000b94 <__ssvfiscanf_r+0x94>
 8000bee:	0018      	movs	r0, r3
 8000bf0:	3858      	subs	r0, #88	@ 0x58
 8000bf2:	2820      	cmp	r0, #32
 8000bf4:	d8ef      	bhi.n	8000bd6 <__ssvfiscanf_r+0xd6>
 8000bf6:	f7ff fa8f 	bl	8000118 <__gnu_thumb1_case_shi>
 8000bfa:	004b      	.short	0x004b
 8000bfc:	ffeeffee 	.word	0xffeeffee
 8000c00:	ffee007d 	.word	0xffee007d
 8000c04:	ffeeffee 	.word	0xffeeffee
 8000c08:	ffeeffee 	.word	0xffeeffee
 8000c0c:	ffeeffee 	.word	0xffeeffee
 8000c10:	007b0088 	.word	0x007b0088
 8000c14:	00240024 	.word	0x00240024
 8000c18:	ffee0024 	.word	0xffee0024
 8000c1c:	ffee0055 	.word	0xffee0055
 8000c20:	ffeeffee 	.word	0xffeeffee
 8000c24:	0090ffee 	.word	0x0090ffee
 8000c28:	00470059 	.word	0x00470059
 8000c2c:	ffeeffee 	.word	0xffeeffee
 8000c30:	ffee008e 	.word	0xffee008e
 8000c34:	ffee007b 	.word	0xffee007b
 8000c38:	004bffee 	.word	0x004bffee
 8000c3c:	3b45      	subs	r3, #69	@ 0x45
 8000c3e:	2b02      	cmp	r3, #2
 8000c40:	d8c9      	bhi.n	8000bd6 <__ssvfiscanf_r+0xd6>
 8000c42:	2305      	movs	r3, #5
 8000c44:	e035      	b.n	8000cb2 <__ssvfiscanf_r+0x1b2>
 8000c46:	6863      	ldr	r3, [r4, #4]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	dd0d      	ble.n	8000c68 <__ssvfiscanf_r+0x168>
 8000c4c:	6823      	ldr	r3, [r4, #0]
 8000c4e:	781a      	ldrb	r2, [r3, #0]
 8000c50:	42b2      	cmp	r2, r6
 8000c52:	d000      	beq.n	8000c56 <__ssvfiscanf_r+0x156>
 8000c54:	e0a9      	b.n	8000daa <__ssvfiscanf_r+0x2aa>
 8000c56:	3301      	adds	r3, #1
 8000c58:	6862      	ldr	r2, [r4, #4]
 8000c5a:	6023      	str	r3, [r4, #0]
 8000c5c:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8000c5e:	3a01      	subs	r2, #1
 8000c60:	3301      	adds	r3, #1
 8000c62:	6062      	str	r2, [r4, #4]
 8000c64:	9347      	str	r3, [sp, #284]	@ 0x11c
 8000c66:	e774      	b.n	8000b52 <__ssvfiscanf_r+0x52>
 8000c68:	23c0      	movs	r3, #192	@ 0xc0
 8000c6a:	aa43      	add	r2, sp, #268	@ 0x10c
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	0021      	movs	r1, r4
 8000c70:	58d3      	ldr	r3, [r2, r3]
 8000c72:	9800      	ldr	r0, [sp, #0]
 8000c74:	4798      	blx	r3
 8000c76:	2800      	cmp	r0, #0
 8000c78:	d0e8      	beq.n	8000c4c <__ssvfiscanf_r+0x14c>
 8000c7a:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8000c7c:	2800      	cmp	r0, #0
 8000c7e:	d000      	beq.n	8000c82 <__ssvfiscanf_r+0x182>
 8000c80:	e08b      	b.n	8000d9a <__ssvfiscanf_r+0x29a>
 8000c82:	2001      	movs	r0, #1
 8000c84:	4240      	negs	r0, r0
 8000c86:	e08c      	b.n	8000da2 <__ssvfiscanf_r+0x2a2>
 8000c88:	2220      	movs	r2, #32
 8000c8a:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8000c8c:	430a      	orrs	r2, r1
 8000c8e:	9243      	str	r2, [sp, #268]	@ 0x10c
 8000c90:	2280      	movs	r2, #128	@ 0x80
 8000c92:	9943      	ldr	r1, [sp, #268]	@ 0x10c
 8000c94:	0092      	lsls	r2, r2, #2
 8000c96:	430a      	orrs	r2, r1
 8000c98:	9243      	str	r2, [sp, #268]	@ 0x10c
 8000c9a:	2210      	movs	r2, #16
 8000c9c:	9244      	str	r2, [sp, #272]	@ 0x110
 8000c9e:	2b6e      	cmp	r3, #110	@ 0x6e
 8000ca0:	d902      	bls.n	8000ca8 <__ssvfiscanf_r+0x1a8>
 8000ca2:	e005      	b.n	8000cb0 <__ssvfiscanf_r+0x1b0>
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	9344      	str	r3, [sp, #272]	@ 0x110
 8000ca8:	2303      	movs	r3, #3
 8000caa:	e002      	b.n	8000cb2 <__ssvfiscanf_r+0x1b2>
 8000cac:	2308      	movs	r3, #8
 8000cae:	9344      	str	r3, [sp, #272]	@ 0x110
 8000cb0:	2304      	movs	r3, #4
 8000cb2:	9349      	str	r3, [sp, #292]	@ 0x124
 8000cb4:	6863      	ldr	r3, [r4, #4]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	dd3e      	ble.n	8000d38 <__ssvfiscanf_r+0x238>
 8000cba:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8000cbc:	065b      	lsls	r3, r3, #25
 8000cbe:	d408      	bmi.n	8000cd2 <__ssvfiscanf_r+0x1d2>
 8000cc0:	26c0      	movs	r6, #192	@ 0xc0
 8000cc2:	2508      	movs	r5, #8
 8000cc4:	0076      	lsls	r6, r6, #1
 8000cc6:	6823      	ldr	r3, [r4, #0]
 8000cc8:	493c      	ldr	r1, [pc, #240]	@ (8000dbc <__ssvfiscanf_r+0x2bc>)
 8000cca:	781a      	ldrb	r2, [r3, #0]
 8000ccc:	5c8a      	ldrb	r2, [r1, r2]
 8000cce:	422a      	tst	r2, r5
 8000cd0:	d13c      	bne.n	8000d4c <__ssvfiscanf_r+0x24c>
 8000cd2:	9b49      	ldr	r3, [sp, #292]	@ 0x124
 8000cd4:	2b02      	cmp	r3, #2
 8000cd6:	dc4c      	bgt.n	8000d72 <__ssvfiscanf_r+0x272>
 8000cd8:	0022      	movs	r2, r4
 8000cda:	9800      	ldr	r0, [sp, #0]
 8000cdc:	ab02      	add	r3, sp, #8
 8000cde:	a943      	add	r1, sp, #268	@ 0x10c
 8000ce0:	f000 f872 	bl	8000dc8 <_scanf_chars>
 8000ce4:	2801      	cmp	r0, #1
 8000ce6:	d060      	beq.n	8000daa <__ssvfiscanf_r+0x2aa>
 8000ce8:	2802      	cmp	r0, #2
 8000cea:	d000      	beq.n	8000cee <__ssvfiscanf_r+0x1ee>
 8000cec:	e731      	b.n	8000b52 <__ssvfiscanf_r+0x52>
 8000cee:	e7c4      	b.n	8000c7a <__ssvfiscanf_r+0x17a>
 8000cf0:	220a      	movs	r2, #10
 8000cf2:	e7d3      	b.n	8000c9c <__ssvfiscanf_r+0x19c>
 8000cf4:	0039      	movs	r1, r7
 8000cf6:	a803      	add	r0, sp, #12
 8000cf8:	f000 f9c6 	bl	8001088 <__sccl>
 8000cfc:	2340      	movs	r3, #64	@ 0x40
 8000cfe:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8000d00:	0007      	movs	r7, r0
 8000d02:	4313      	orrs	r3, r2
 8000d04:	9343      	str	r3, [sp, #268]	@ 0x10c
 8000d06:	2301      	movs	r3, #1
 8000d08:	e7d3      	b.n	8000cb2 <__ssvfiscanf_r+0x1b2>
 8000d0a:	2340      	movs	r3, #64	@ 0x40
 8000d0c:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	9343      	str	r3, [sp, #268]	@ 0x10c
 8000d12:	2300      	movs	r3, #0
 8000d14:	e7cd      	b.n	8000cb2 <__ssvfiscanf_r+0x1b2>
 8000d16:	2302      	movs	r3, #2
 8000d18:	e7cb      	b.n	8000cb2 <__ssvfiscanf_r+0x1b2>
 8000d1a:	9a43      	ldr	r2, [sp, #268]	@ 0x10c
 8000d1c:	06d3      	lsls	r3, r2, #27
 8000d1e:	d500      	bpl.n	8000d22 <__ssvfiscanf_r+0x222>
 8000d20:	e717      	b.n	8000b52 <__ssvfiscanf_r+0x52>
 8000d22:	9b02      	ldr	r3, [sp, #8]
 8000d24:	9947      	ldr	r1, [sp, #284]	@ 0x11c
 8000d26:	1d18      	adds	r0, r3, #4
 8000d28:	9002      	str	r0, [sp, #8]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	07d5      	lsls	r5, r2, #31
 8000d2e:	d501      	bpl.n	8000d34 <__ssvfiscanf_r+0x234>
 8000d30:	8019      	strh	r1, [r3, #0]
 8000d32:	e70e      	b.n	8000b52 <__ssvfiscanf_r+0x52>
 8000d34:	6019      	str	r1, [r3, #0]
 8000d36:	e70c      	b.n	8000b52 <__ssvfiscanf_r+0x52>
 8000d38:	23c0      	movs	r3, #192	@ 0xc0
 8000d3a:	aa43      	add	r2, sp, #268	@ 0x10c
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	0021      	movs	r1, r4
 8000d40:	58d3      	ldr	r3, [r2, r3]
 8000d42:	9800      	ldr	r0, [sp, #0]
 8000d44:	4798      	blx	r3
 8000d46:	2800      	cmp	r0, #0
 8000d48:	d0b7      	beq.n	8000cba <__ssvfiscanf_r+0x1ba>
 8000d4a:	e796      	b.n	8000c7a <__ssvfiscanf_r+0x17a>
 8000d4c:	9a47      	ldr	r2, [sp, #284]	@ 0x11c
 8000d4e:	3201      	adds	r2, #1
 8000d50:	9247      	str	r2, [sp, #284]	@ 0x11c
 8000d52:	6862      	ldr	r2, [r4, #4]
 8000d54:	3a01      	subs	r2, #1
 8000d56:	6062      	str	r2, [r4, #4]
 8000d58:	2a00      	cmp	r2, #0
 8000d5a:	dd02      	ble.n	8000d62 <__ssvfiscanf_r+0x262>
 8000d5c:	3301      	adds	r3, #1
 8000d5e:	6023      	str	r3, [r4, #0]
 8000d60:	e7b1      	b.n	8000cc6 <__ssvfiscanf_r+0x1c6>
 8000d62:	ab43      	add	r3, sp, #268	@ 0x10c
 8000d64:	0021      	movs	r1, r4
 8000d66:	599b      	ldr	r3, [r3, r6]
 8000d68:	9800      	ldr	r0, [sp, #0]
 8000d6a:	4798      	blx	r3
 8000d6c:	2800      	cmp	r0, #0
 8000d6e:	d0aa      	beq.n	8000cc6 <__ssvfiscanf_r+0x1c6>
 8000d70:	e783      	b.n	8000c7a <__ssvfiscanf_r+0x17a>
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	dc06      	bgt.n	8000d84 <__ssvfiscanf_r+0x284>
 8000d76:	0022      	movs	r2, r4
 8000d78:	9800      	ldr	r0, [sp, #0]
 8000d7a:	ab02      	add	r3, sp, #8
 8000d7c:	a943      	add	r1, sp, #268	@ 0x10c
 8000d7e:	f000 f883 	bl	8000e88 <_scanf_i>
 8000d82:	e7af      	b.n	8000ce4 <__ssvfiscanf_r+0x1e4>
 8000d84:	4b0f      	ldr	r3, [pc, #60]	@ (8000dc4 <__ssvfiscanf_r+0x2c4>)
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d100      	bne.n	8000d8c <__ssvfiscanf_r+0x28c>
 8000d8a:	e6e2      	b.n	8000b52 <__ssvfiscanf_r+0x52>
 8000d8c:	0022      	movs	r2, r4
 8000d8e:	9800      	ldr	r0, [sp, #0]
 8000d90:	ab02      	add	r3, sp, #8
 8000d92:	a943      	add	r1, sp, #268	@ 0x10c
 8000d94:	e000      	b.n	8000d98 <__ssvfiscanf_r+0x298>
 8000d96:	bf00      	nop
 8000d98:	e7a4      	b.n	8000ce4 <__ssvfiscanf_r+0x1e4>
 8000d9a:	89a3      	ldrh	r3, [r4, #12]
 8000d9c:	065b      	lsls	r3, r3, #25
 8000d9e:	d500      	bpl.n	8000da2 <__ssvfiscanf_r+0x2a2>
 8000da0:	e76f      	b.n	8000c82 <__ssvfiscanf_r+0x182>
 8000da2:	23a5      	movs	r3, #165	@ 0xa5
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	449d      	add	sp, r3
 8000da8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000daa:	9846      	ldr	r0, [sp, #280]	@ 0x118
 8000dac:	e7f9      	b.n	8000da2 <__ssvfiscanf_r+0x2a2>
 8000dae:	46c0      	nop			@ (mov r8, r8)
 8000db0:	fffffd6c 	.word	0xfffffd6c
 8000db4:	08000a49 	.word	0x08000a49
 8000db8:	08000ac1 	.word	0x08000ac1
 8000dbc:	080014a8 	.word	0x080014a8
 8000dc0:	08001488 	.word	0x08001488
 8000dc4:	00000000 	.word	0x00000000

08000dc8 <_scanf_chars>:
 8000dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000dca:	0015      	movs	r5, r2
 8000dcc:	688a      	ldr	r2, [r1, #8]
 8000dce:	000c      	movs	r4, r1
 8000dd0:	9001      	str	r0, [sp, #4]
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d104      	bne.n	8000de0 <_scanf_chars+0x18>
 8000dd6:	698a      	ldr	r2, [r1, #24]
 8000dd8:	2a00      	cmp	r2, #0
 8000dda:	d117      	bne.n	8000e0c <_scanf_chars+0x44>
 8000ddc:	3201      	adds	r2, #1
 8000dde:	60a2      	str	r2, [r4, #8]
 8000de0:	6822      	ldr	r2, [r4, #0]
 8000de2:	06d2      	lsls	r2, r2, #27
 8000de4:	d403      	bmi.n	8000dee <_scanf_chars+0x26>
 8000de6:	681a      	ldr	r2, [r3, #0]
 8000de8:	1d11      	adds	r1, r2, #4
 8000dea:	6019      	str	r1, [r3, #0]
 8000dec:	6817      	ldr	r7, [r2, #0]
 8000dee:	2600      	movs	r6, #0
 8000df0:	69a0      	ldr	r0, [r4, #24]
 8000df2:	2800      	cmp	r0, #0
 8000df4:	d016      	beq.n	8000e24 <_scanf_chars+0x5c>
 8000df6:	2801      	cmp	r0, #1
 8000df8:	d10b      	bne.n	8000e12 <_scanf_chars+0x4a>
 8000dfa:	682b      	ldr	r3, [r5, #0]
 8000dfc:	6962      	ldr	r2, [r4, #20]
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	5cd3      	ldrb	r3, [r2, r3]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d10e      	bne.n	8000e24 <_scanf_chars+0x5c>
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d03b      	beq.n	8000e82 <_scanf_chars+0xba>
 8000e0a:	e029      	b.n	8000e60 <_scanf_chars+0x98>
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	4252      	negs	r2, r2
 8000e10:	e7e5      	b.n	8000dde <_scanf_chars+0x16>
 8000e12:	2802      	cmp	r0, #2
 8000e14:	d124      	bne.n	8000e60 <_scanf_chars+0x98>
 8000e16:	682b      	ldr	r3, [r5, #0]
 8000e18:	4a1a      	ldr	r2, [pc, #104]	@ (8000e84 <_scanf_chars+0xbc>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	5cd3      	ldrb	r3, [r2, r3]
 8000e1e:	2208      	movs	r2, #8
 8000e20:	4213      	tst	r3, r2
 8000e22:	d11d      	bne.n	8000e60 <_scanf_chars+0x98>
 8000e24:	2210      	movs	r2, #16
 8000e26:	6823      	ldr	r3, [r4, #0]
 8000e28:	3601      	adds	r6, #1
 8000e2a:	4213      	tst	r3, r2
 8000e2c:	d103      	bne.n	8000e36 <_scanf_chars+0x6e>
 8000e2e:	682b      	ldr	r3, [r5, #0]
 8000e30:	781b      	ldrb	r3, [r3, #0]
 8000e32:	703b      	strb	r3, [r7, #0]
 8000e34:	3701      	adds	r7, #1
 8000e36:	682a      	ldr	r2, [r5, #0]
 8000e38:	686b      	ldr	r3, [r5, #4]
 8000e3a:	3201      	adds	r2, #1
 8000e3c:	602a      	str	r2, [r5, #0]
 8000e3e:	68a2      	ldr	r2, [r4, #8]
 8000e40:	3b01      	subs	r3, #1
 8000e42:	3a01      	subs	r2, #1
 8000e44:	606b      	str	r3, [r5, #4]
 8000e46:	60a2      	str	r2, [r4, #8]
 8000e48:	2a00      	cmp	r2, #0
 8000e4a:	d009      	beq.n	8000e60 <_scanf_chars+0x98>
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	dccf      	bgt.n	8000df0 <_scanf_chars+0x28>
 8000e50:	23c0      	movs	r3, #192	@ 0xc0
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	0029      	movs	r1, r5
 8000e56:	58e3      	ldr	r3, [r4, r3]
 8000e58:	9801      	ldr	r0, [sp, #4]
 8000e5a:	4798      	blx	r3
 8000e5c:	2800      	cmp	r0, #0
 8000e5e:	d0c7      	beq.n	8000df0 <_scanf_chars+0x28>
 8000e60:	6822      	ldr	r2, [r4, #0]
 8000e62:	2310      	movs	r3, #16
 8000e64:	0011      	movs	r1, r2
 8000e66:	4019      	ands	r1, r3
 8000e68:	421a      	tst	r2, r3
 8000e6a:	d106      	bne.n	8000e7a <_scanf_chars+0xb2>
 8000e6c:	68e3      	ldr	r3, [r4, #12]
 8000e6e:	3301      	adds	r3, #1
 8000e70:	60e3      	str	r3, [r4, #12]
 8000e72:	69a3      	ldr	r3, [r4, #24]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d000      	beq.n	8000e7a <_scanf_chars+0xb2>
 8000e78:	7039      	strb	r1, [r7, #0]
 8000e7a:	2000      	movs	r0, #0
 8000e7c:	6923      	ldr	r3, [r4, #16]
 8000e7e:	199b      	adds	r3, r3, r6
 8000e80:	6123      	str	r3, [r4, #16]
 8000e82:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000e84:	080014a8 	.word	0x080014a8

08000e88 <_scanf_i>:
 8000e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e8a:	b08b      	sub	sp, #44	@ 0x2c
 8000e8c:	9301      	str	r3, [sp, #4]
 8000e8e:	4b78      	ldr	r3, [pc, #480]	@ (8001070 <_scanf_i+0x1e8>)
 8000e90:	0016      	movs	r6, r2
 8000e92:	9004      	str	r0, [sp, #16]
 8000e94:	aa07      	add	r2, sp, #28
 8000e96:	cba1      	ldmia	r3!, {r0, r5, r7}
 8000e98:	c2a1      	stmia	r2!, {r0, r5, r7}
 8000e9a:	4a76      	ldr	r2, [pc, #472]	@ (8001074 <_scanf_i+0x1ec>)
 8000e9c:	698b      	ldr	r3, [r1, #24]
 8000e9e:	000c      	movs	r4, r1
 8000ea0:	9205      	str	r2, [sp, #20]
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d101      	bne.n	8000eaa <_scanf_i+0x22>
 8000ea6:	4b74      	ldr	r3, [pc, #464]	@ (8001078 <_scanf_i+0x1f0>)
 8000ea8:	9305      	str	r3, [sp, #20]
 8000eaa:	22ae      	movs	r2, #174	@ 0xae
 8000eac:	2000      	movs	r0, #0
 8000eae:	68a3      	ldr	r3, [r4, #8]
 8000eb0:	0052      	lsls	r2, r2, #1
 8000eb2:	1e59      	subs	r1, r3, #1
 8000eb4:	9003      	str	r0, [sp, #12]
 8000eb6:	4291      	cmp	r1, r2
 8000eb8:	d905      	bls.n	8000ec6 <_scanf_i+0x3e>
 8000eba:	3b5e      	subs	r3, #94	@ 0x5e
 8000ebc:	3bff      	subs	r3, #255	@ 0xff
 8000ebe:	9303      	str	r3, [sp, #12]
 8000ec0:	235e      	movs	r3, #94	@ 0x5e
 8000ec2:	33ff      	adds	r3, #255	@ 0xff
 8000ec4:	60a3      	str	r3, [r4, #8]
 8000ec6:	0023      	movs	r3, r4
 8000ec8:	331c      	adds	r3, #28
 8000eca:	9300      	str	r3, [sp, #0]
 8000ecc:	23d0      	movs	r3, #208	@ 0xd0
 8000ece:	2700      	movs	r7, #0
 8000ed0:	6822      	ldr	r2, [r4, #0]
 8000ed2:	011b      	lsls	r3, r3, #4
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	6023      	str	r3, [r4, #0]
 8000ed8:	9b00      	ldr	r3, [sp, #0]
 8000eda:	9302      	str	r3, [sp, #8]
 8000edc:	6833      	ldr	r3, [r6, #0]
 8000ede:	a807      	add	r0, sp, #28
 8000ee0:	7819      	ldrb	r1, [r3, #0]
 8000ee2:	00bb      	lsls	r3, r7, #2
 8000ee4:	2202      	movs	r2, #2
 8000ee6:	5818      	ldr	r0, [r3, r0]
 8000ee8:	f000 f958 	bl	800119c <memchr>
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d029      	beq.n	8000f44 <_scanf_i+0xbc>
 8000ef0:	2f01      	cmp	r7, #1
 8000ef2:	d15e      	bne.n	8000fb2 <_scanf_i+0x12a>
 8000ef4:	6863      	ldr	r3, [r4, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d106      	bne.n	8000f08 <_scanf_i+0x80>
 8000efa:	3308      	adds	r3, #8
 8000efc:	6822      	ldr	r2, [r4, #0]
 8000efe:	6063      	str	r3, [r4, #4]
 8000f00:	33f9      	adds	r3, #249	@ 0xf9
 8000f02:	33ff      	adds	r3, #255	@ 0xff
 8000f04:	4313      	orrs	r3, r2
 8000f06:	6023      	str	r3, [r4, #0]
 8000f08:	6823      	ldr	r3, [r4, #0]
 8000f0a:	4a5c      	ldr	r2, [pc, #368]	@ (800107c <_scanf_i+0x1f4>)
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	6023      	str	r3, [r4, #0]
 8000f10:	68a3      	ldr	r3, [r4, #8]
 8000f12:	1e5a      	subs	r2, r3, #1
 8000f14:	60a2      	str	r2, [r4, #8]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d014      	beq.n	8000f44 <_scanf_i+0xbc>
 8000f1a:	6833      	ldr	r3, [r6, #0]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	6032      	str	r2, [r6, #0]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	9a02      	ldr	r2, [sp, #8]
 8000f24:	7013      	strb	r3, [r2, #0]
 8000f26:	6873      	ldr	r3, [r6, #4]
 8000f28:	1c55      	adds	r5, r2, #1
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	6073      	str	r3, [r6, #4]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	dc07      	bgt.n	8000f42 <_scanf_i+0xba>
 8000f32:	23c0      	movs	r3, #192	@ 0xc0
 8000f34:	005b      	lsls	r3, r3, #1
 8000f36:	0031      	movs	r1, r6
 8000f38:	58e3      	ldr	r3, [r4, r3]
 8000f3a:	9804      	ldr	r0, [sp, #16]
 8000f3c:	4798      	blx	r3
 8000f3e:	2800      	cmp	r0, #0
 8000f40:	d17e      	bne.n	8001040 <_scanf_i+0x1b8>
 8000f42:	9502      	str	r5, [sp, #8]
 8000f44:	3701      	adds	r7, #1
 8000f46:	2f03      	cmp	r7, #3
 8000f48:	d1c8      	bne.n	8000edc <_scanf_i+0x54>
 8000f4a:	6863      	ldr	r3, [r4, #4]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d101      	bne.n	8000f54 <_scanf_i+0xcc>
 8000f50:	330a      	adds	r3, #10
 8000f52:	6063      	str	r3, [r4, #4]
 8000f54:	2700      	movs	r7, #0
 8000f56:	6863      	ldr	r3, [r4, #4]
 8000f58:	4949      	ldr	r1, [pc, #292]	@ (8001080 <_scanf_i+0x1f8>)
 8000f5a:	6960      	ldr	r0, [r4, #20]
 8000f5c:	1ac9      	subs	r1, r1, r3
 8000f5e:	f000 f893 	bl	8001088 <__sccl>
 8000f62:	9d02      	ldr	r5, [sp, #8]
 8000f64:	68a3      	ldr	r3, [r4, #8]
 8000f66:	6820      	ldr	r0, [r4, #0]
 8000f68:	9302      	str	r3, [sp, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d03f      	beq.n	8000fee <_scanf_i+0x166>
 8000f6e:	6831      	ldr	r1, [r6, #0]
 8000f70:	6963      	ldr	r3, [r4, #20]
 8000f72:	780a      	ldrb	r2, [r1, #0]
 8000f74:	5c9b      	ldrb	r3, [r3, r2]
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d039      	beq.n	8000fee <_scanf_i+0x166>
 8000f7a:	2a30      	cmp	r2, #48	@ 0x30
 8000f7c:	d128      	bne.n	8000fd0 <_scanf_i+0x148>
 8000f7e:	2380      	movs	r3, #128	@ 0x80
 8000f80:	011b      	lsls	r3, r3, #4
 8000f82:	4218      	tst	r0, r3
 8000f84:	d024      	beq.n	8000fd0 <_scanf_i+0x148>
 8000f86:	9b03      	ldr	r3, [sp, #12]
 8000f88:	3701      	adds	r7, #1
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d005      	beq.n	8000f9a <_scanf_i+0x112>
 8000f8e:	001a      	movs	r2, r3
 8000f90:	9b02      	ldr	r3, [sp, #8]
 8000f92:	3a01      	subs	r2, #1
 8000f94:	3301      	adds	r3, #1
 8000f96:	9203      	str	r2, [sp, #12]
 8000f98:	60a3      	str	r3, [r4, #8]
 8000f9a:	6873      	ldr	r3, [r6, #4]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	6073      	str	r3, [r6, #4]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	dd1c      	ble.n	8000fde <_scanf_i+0x156>
 8000fa4:	6833      	ldr	r3, [r6, #0]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	6033      	str	r3, [r6, #0]
 8000faa:	68a3      	ldr	r3, [r4, #8]
 8000fac:	3b01      	subs	r3, #1
 8000fae:	60a3      	str	r3, [r4, #8]
 8000fb0:	e7d8      	b.n	8000f64 <_scanf_i+0xdc>
 8000fb2:	2f02      	cmp	r7, #2
 8000fb4:	d1ac      	bne.n	8000f10 <_scanf_i+0x88>
 8000fb6:	23c0      	movs	r3, #192	@ 0xc0
 8000fb8:	2180      	movs	r1, #128	@ 0x80
 8000fba:	6822      	ldr	r2, [r4, #0]
 8000fbc:	00db      	lsls	r3, r3, #3
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	0089      	lsls	r1, r1, #2
 8000fc2:	428b      	cmp	r3, r1
 8000fc4:	d1c1      	bne.n	8000f4a <_scanf_i+0xc2>
 8000fc6:	2310      	movs	r3, #16
 8000fc8:	6063      	str	r3, [r4, #4]
 8000fca:	33f0      	adds	r3, #240	@ 0xf0
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	e79e      	b.n	8000f0e <_scanf_i+0x86>
 8000fd0:	4b2c      	ldr	r3, [pc, #176]	@ (8001084 <_scanf_i+0x1fc>)
 8000fd2:	4003      	ands	r3, r0
 8000fd4:	6023      	str	r3, [r4, #0]
 8000fd6:	780b      	ldrb	r3, [r1, #0]
 8000fd8:	702b      	strb	r3, [r5, #0]
 8000fda:	3501      	adds	r5, #1
 8000fdc:	e7dd      	b.n	8000f9a <_scanf_i+0x112>
 8000fde:	23c0      	movs	r3, #192	@ 0xc0
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	0031      	movs	r1, r6
 8000fe4:	58e3      	ldr	r3, [r4, r3]
 8000fe6:	9804      	ldr	r0, [sp, #16]
 8000fe8:	4798      	blx	r3
 8000fea:	2800      	cmp	r0, #0
 8000fec:	d0dd      	beq.n	8000faa <_scanf_i+0x122>
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	05db      	lsls	r3, r3, #23
 8000ff2:	d50e      	bpl.n	8001012 <_scanf_i+0x18a>
 8000ff4:	9b00      	ldr	r3, [sp, #0]
 8000ff6:	429d      	cmp	r5, r3
 8000ff8:	d907      	bls.n	800100a <_scanf_i+0x182>
 8000ffa:	23be      	movs	r3, #190	@ 0xbe
 8000ffc:	3d01      	subs	r5, #1
 8000ffe:	005b      	lsls	r3, r3, #1
 8001000:	0032      	movs	r2, r6
 8001002:	7829      	ldrb	r1, [r5, #0]
 8001004:	58e3      	ldr	r3, [r4, r3]
 8001006:	9804      	ldr	r0, [sp, #16]
 8001008:	4798      	blx	r3
 800100a:	9b00      	ldr	r3, [sp, #0]
 800100c:	2001      	movs	r0, #1
 800100e:	429d      	cmp	r5, r3
 8001010:	d029      	beq.n	8001066 <_scanf_i+0x1de>
 8001012:	6821      	ldr	r1, [r4, #0]
 8001014:	2310      	movs	r3, #16
 8001016:	000a      	movs	r2, r1
 8001018:	401a      	ands	r2, r3
 800101a:	4219      	tst	r1, r3
 800101c:	d11c      	bne.n	8001058 <_scanf_i+0x1d0>
 800101e:	702a      	strb	r2, [r5, #0]
 8001020:	6863      	ldr	r3, [r4, #4]
 8001022:	9900      	ldr	r1, [sp, #0]
 8001024:	9804      	ldr	r0, [sp, #16]
 8001026:	9e05      	ldr	r6, [sp, #20]
 8001028:	47b0      	blx	r6
 800102a:	9b01      	ldr	r3, [sp, #4]
 800102c:	6822      	ldr	r2, [r4, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	0691      	lsls	r1, r2, #26
 8001032:	d507      	bpl.n	8001044 <_scanf_i+0x1bc>
 8001034:	9901      	ldr	r1, [sp, #4]
 8001036:	1d1a      	adds	r2, r3, #4
 8001038:	600a      	str	r2, [r1, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	6018      	str	r0, [r3, #0]
 800103e:	e008      	b.n	8001052 <_scanf_i+0x1ca>
 8001040:	2700      	movs	r7, #0
 8001042:	e7d4      	b.n	8000fee <_scanf_i+0x166>
 8001044:	1d19      	adds	r1, r3, #4
 8001046:	07d6      	lsls	r6, r2, #31
 8001048:	d50f      	bpl.n	800106a <_scanf_i+0x1e2>
 800104a:	9a01      	ldr	r2, [sp, #4]
 800104c:	6011      	str	r1, [r2, #0]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	8018      	strh	r0, [r3, #0]
 8001052:	68e3      	ldr	r3, [r4, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60e3      	str	r3, [r4, #12]
 8001058:	2000      	movs	r0, #0
 800105a:	9b00      	ldr	r3, [sp, #0]
 800105c:	1aed      	subs	r5, r5, r3
 800105e:	6923      	ldr	r3, [r4, #16]
 8001060:	19ed      	adds	r5, r5, r7
 8001062:	195b      	adds	r3, r3, r5
 8001064:	6123      	str	r3, [r4, #16]
 8001066:	b00b      	add	sp, #44	@ 0x2c
 8001068:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800106a:	9a01      	ldr	r2, [sp, #4]
 800106c:	6011      	str	r1, [r2, #0]
 800106e:	e7e4      	b.n	800103a <_scanf_i+0x1b2>
 8001070:	0800147c 	.word	0x0800147c
 8001074:	08001445 	.word	0x08001445
 8001078:	08001339 	.word	0x08001339
 800107c:	fffffaff 	.word	0xfffffaff
 8001080:	0800149c 	.word	0x0800149c
 8001084:	fffff6ff 	.word	0xfffff6ff

08001088 <__sccl>:
 8001088:	b570      	push	{r4, r5, r6, lr}
 800108a:	780b      	ldrb	r3, [r1, #0]
 800108c:	0004      	movs	r4, r0
 800108e:	2b5e      	cmp	r3, #94	@ 0x5e
 8001090:	d019      	beq.n	80010c6 <__sccl+0x3e>
 8001092:	1c4d      	adds	r5, r1, #1
 8001094:	2100      	movs	r1, #0
 8001096:	0022      	movs	r2, r4
 8001098:	1c60      	adds	r0, r4, #1
 800109a:	30ff      	adds	r0, #255	@ 0xff
 800109c:	7011      	strb	r1, [r2, #0]
 800109e:	3201      	adds	r2, #1
 80010a0:	4282      	cmp	r2, r0
 80010a2:	d1fb      	bne.n	800109c <__sccl+0x14>
 80010a4:	1e68      	subs	r0, r5, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d026      	beq.n	80010f8 <__sccl+0x70>
 80010aa:	2601      	movs	r6, #1
 80010ac:	404e      	eors	r6, r1
 80010ae:	0028      	movs	r0, r5
 80010b0:	54e6      	strb	r6, [r4, r3]
 80010b2:	7801      	ldrb	r1, [r0, #0]
 80010b4:	1c45      	adds	r5, r0, #1
 80010b6:	292d      	cmp	r1, #45	@ 0x2d
 80010b8:	d009      	beq.n	80010ce <__sccl+0x46>
 80010ba:	295d      	cmp	r1, #93	@ 0x5d
 80010bc:	d01b      	beq.n	80010f6 <__sccl+0x6e>
 80010be:	2900      	cmp	r1, #0
 80010c0:	d01a      	beq.n	80010f8 <__sccl+0x70>
 80010c2:	000b      	movs	r3, r1
 80010c4:	e7f3      	b.n	80010ae <__sccl+0x26>
 80010c6:	784b      	ldrb	r3, [r1, #1]
 80010c8:	1c8d      	adds	r5, r1, #2
 80010ca:	2101      	movs	r1, #1
 80010cc:	e7e3      	b.n	8001096 <__sccl+0xe>
 80010ce:	7842      	ldrb	r2, [r0, #1]
 80010d0:	2a5d      	cmp	r2, #93	@ 0x5d
 80010d2:	d0f6      	beq.n	80010c2 <__sccl+0x3a>
 80010d4:	4293      	cmp	r3, r2
 80010d6:	dcf4      	bgt.n	80010c2 <__sccl+0x3a>
 80010d8:	0019      	movs	r1, r3
 80010da:	3002      	adds	r0, #2
 80010dc:	3101      	adds	r1, #1
 80010de:	5466      	strb	r6, [r4, r1]
 80010e0:	428a      	cmp	r2, r1
 80010e2:	dcfb      	bgt.n	80010dc <__sccl+0x54>
 80010e4:	1c59      	adds	r1, r3, #1
 80010e6:	4293      	cmp	r3, r2
 80010e8:	db02      	blt.n	80010f0 <__sccl+0x68>
 80010ea:	2200      	movs	r2, #0
 80010ec:	188b      	adds	r3, r1, r2
 80010ee:	e7e0      	b.n	80010b2 <__sccl+0x2a>
 80010f0:	1ad2      	subs	r2, r2, r3
 80010f2:	3a01      	subs	r2, #1
 80010f4:	e7fa      	b.n	80010ec <__sccl+0x64>
 80010f6:	0028      	movs	r0, r5
 80010f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080010fc <__submore>:
 80010fc:	000b      	movs	r3, r1
 80010fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001100:	6b4d      	ldr	r5, [r1, #52]	@ 0x34
 8001102:	3344      	adds	r3, #68	@ 0x44
 8001104:	000c      	movs	r4, r1
 8001106:	429d      	cmp	r5, r3
 8001108:	d11c      	bne.n	8001144 <__submore+0x48>
 800110a:	2680      	movs	r6, #128	@ 0x80
 800110c:	00f6      	lsls	r6, r6, #3
 800110e:	0031      	movs	r1, r6
 8001110:	f7ff fc0a 	bl	8000928 <_malloc_r>
 8001114:	2800      	cmp	r0, #0
 8001116:	d102      	bne.n	800111e <__submore+0x22>
 8001118:	2001      	movs	r0, #1
 800111a:	4240      	negs	r0, r0
 800111c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800111e:	0023      	movs	r3, r4
 8001120:	6360      	str	r0, [r4, #52]	@ 0x34
 8001122:	63a6      	str	r6, [r4, #56]	@ 0x38
 8001124:	3346      	adds	r3, #70	@ 0x46
 8001126:	781a      	ldrb	r2, [r3, #0]
 8001128:	4b10      	ldr	r3, [pc, #64]	@ (800116c <__submore+0x70>)
 800112a:	54c2      	strb	r2, [r0, r3]
 800112c:	0023      	movs	r3, r4
 800112e:	3345      	adds	r3, #69	@ 0x45
 8001130:	781a      	ldrb	r2, [r3, #0]
 8001132:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <__submore+0x74>)
 8001134:	54c2      	strb	r2, [r0, r3]
 8001136:	782a      	ldrb	r2, [r5, #0]
 8001138:	4b0e      	ldr	r3, [pc, #56]	@ (8001174 <__submore+0x78>)
 800113a:	54c2      	strb	r2, [r0, r3]
 800113c:	18c0      	adds	r0, r0, r3
 800113e:	6020      	str	r0, [r4, #0]
 8001140:	2000      	movs	r0, #0
 8001142:	e7eb      	b.n	800111c <__submore+0x20>
 8001144:	6b8e      	ldr	r6, [r1, #56]	@ 0x38
 8001146:	0029      	movs	r1, r5
 8001148:	0073      	lsls	r3, r6, #1
 800114a:	001a      	movs	r2, r3
 800114c:	9301      	str	r3, [sp, #4]
 800114e:	f000 f839 	bl	80011c4 <_realloc_r>
 8001152:	1e05      	subs	r5, r0, #0
 8001154:	d0e0      	beq.n	8001118 <__submore+0x1c>
 8001156:	1987      	adds	r7, r0, r6
 8001158:	0001      	movs	r1, r0
 800115a:	0032      	movs	r2, r6
 800115c:	0038      	movs	r0, r7
 800115e:	f000 f828 	bl	80011b2 <memcpy>
 8001162:	9b01      	ldr	r3, [sp, #4]
 8001164:	6027      	str	r7, [r4, #0]
 8001166:	6365      	str	r5, [r4, #52]	@ 0x34
 8001168:	63a3      	str	r3, [r4, #56]	@ 0x38
 800116a:	e7e9      	b.n	8001140 <__submore+0x44>
 800116c:	000003ff 	.word	0x000003ff
 8001170:	000003fe 	.word	0x000003fe
 8001174:	000003fd 	.word	0x000003fd

08001178 <_sbrk_r>:
 8001178:	2300      	movs	r3, #0
 800117a:	b570      	push	{r4, r5, r6, lr}
 800117c:	4d06      	ldr	r5, [pc, #24]	@ (8001198 <_sbrk_r+0x20>)
 800117e:	0004      	movs	r4, r0
 8001180:	0008      	movs	r0, r1
 8001182:	602b      	str	r3, [r5, #0]
 8001184:	f7ff faac 	bl	80006e0 <_sbrk>
 8001188:	1c43      	adds	r3, r0, #1
 800118a:	d103      	bne.n	8001194 <_sbrk_r+0x1c>
 800118c:	682b      	ldr	r3, [r5, #0]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d000      	beq.n	8001194 <_sbrk_r+0x1c>
 8001192:	6023      	str	r3, [r4, #0]
 8001194:	bd70      	pop	{r4, r5, r6, pc}
 8001196:	46c0      	nop			@ (mov r8, r8)
 8001198:	20000250 	.word	0x20000250

0800119c <memchr>:
 800119c:	b2c9      	uxtb	r1, r1
 800119e:	1882      	adds	r2, r0, r2
 80011a0:	4290      	cmp	r0, r2
 80011a2:	d101      	bne.n	80011a8 <memchr+0xc>
 80011a4:	2000      	movs	r0, #0
 80011a6:	4770      	bx	lr
 80011a8:	7803      	ldrb	r3, [r0, #0]
 80011aa:	428b      	cmp	r3, r1
 80011ac:	d0fb      	beq.n	80011a6 <memchr+0xa>
 80011ae:	3001      	adds	r0, #1
 80011b0:	e7f6      	b.n	80011a0 <memchr+0x4>

080011b2 <memcpy>:
 80011b2:	2300      	movs	r3, #0
 80011b4:	b510      	push	{r4, lr}
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d100      	bne.n	80011bc <memcpy+0xa>
 80011ba:	bd10      	pop	{r4, pc}
 80011bc:	5ccc      	ldrb	r4, [r1, r3]
 80011be:	54c4      	strb	r4, [r0, r3]
 80011c0:	3301      	adds	r3, #1
 80011c2:	e7f8      	b.n	80011b6 <memcpy+0x4>

080011c4 <_realloc_r>:
 80011c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80011c6:	0006      	movs	r6, r0
 80011c8:	000c      	movs	r4, r1
 80011ca:	0015      	movs	r5, r2
 80011cc:	2900      	cmp	r1, #0
 80011ce:	d105      	bne.n	80011dc <_realloc_r+0x18>
 80011d0:	0011      	movs	r1, r2
 80011d2:	f7ff fba9 	bl	8000928 <_malloc_r>
 80011d6:	0004      	movs	r4, r0
 80011d8:	0020      	movs	r0, r4
 80011da:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80011dc:	2a00      	cmp	r2, #0
 80011de:	d103      	bne.n	80011e8 <_realloc_r+0x24>
 80011e0:	f7ff fb36 	bl	8000850 <_free_r>
 80011e4:	002c      	movs	r4, r5
 80011e6:	e7f7      	b.n	80011d8 <_realloc_r+0x14>
 80011e8:	f000 f930 	bl	800144c <_malloc_usable_size_r>
 80011ec:	0007      	movs	r7, r0
 80011ee:	4285      	cmp	r5, r0
 80011f0:	d802      	bhi.n	80011f8 <_realloc_r+0x34>
 80011f2:	0843      	lsrs	r3, r0, #1
 80011f4:	42ab      	cmp	r3, r5
 80011f6:	d3ef      	bcc.n	80011d8 <_realloc_r+0x14>
 80011f8:	0029      	movs	r1, r5
 80011fa:	0030      	movs	r0, r6
 80011fc:	f7ff fb94 	bl	8000928 <_malloc_r>
 8001200:	9001      	str	r0, [sp, #4]
 8001202:	2800      	cmp	r0, #0
 8001204:	d101      	bne.n	800120a <_realloc_r+0x46>
 8001206:	9c01      	ldr	r4, [sp, #4]
 8001208:	e7e6      	b.n	80011d8 <_realloc_r+0x14>
 800120a:	002a      	movs	r2, r5
 800120c:	42bd      	cmp	r5, r7
 800120e:	d900      	bls.n	8001212 <_realloc_r+0x4e>
 8001210:	003a      	movs	r2, r7
 8001212:	0021      	movs	r1, r4
 8001214:	9801      	ldr	r0, [sp, #4]
 8001216:	f7ff ffcc 	bl	80011b2 <memcpy>
 800121a:	0021      	movs	r1, r4
 800121c:	0030      	movs	r0, r6
 800121e:	f7ff fb17 	bl	8000850 <_free_r>
 8001222:	e7f0      	b.n	8001206 <_realloc_r+0x42>

08001224 <_strtol_l.isra.0>:
 8001224:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001226:	b085      	sub	sp, #20
 8001228:	0017      	movs	r7, r2
 800122a:	001e      	movs	r6, r3
 800122c:	9003      	str	r0, [sp, #12]
 800122e:	9101      	str	r1, [sp, #4]
 8001230:	2b24      	cmp	r3, #36	@ 0x24
 8001232:	d823      	bhi.n	800127c <_strtol_l.isra.0+0x58>
 8001234:	000c      	movs	r4, r1
 8001236:	2b01      	cmp	r3, #1
 8001238:	d020      	beq.n	800127c <_strtol_l.isra.0+0x58>
 800123a:	4b3d      	ldr	r3, [pc, #244]	@ (8001330 <_strtol_l.isra.0+0x10c>)
 800123c:	2208      	movs	r2, #8
 800123e:	469c      	mov	ip, r3
 8001240:	0023      	movs	r3, r4
 8001242:	4661      	mov	r1, ip
 8001244:	781d      	ldrb	r5, [r3, #0]
 8001246:	3401      	adds	r4, #1
 8001248:	5d48      	ldrb	r0, [r1, r5]
 800124a:	0001      	movs	r1, r0
 800124c:	4011      	ands	r1, r2
 800124e:	4210      	tst	r0, r2
 8001250:	d1f6      	bne.n	8001240 <_strtol_l.isra.0+0x1c>
 8001252:	2d2d      	cmp	r5, #45	@ 0x2d
 8001254:	d119      	bne.n	800128a <_strtol_l.isra.0+0x66>
 8001256:	7825      	ldrb	r5, [r4, #0]
 8001258:	1c9c      	adds	r4, r3, #2
 800125a:	2301      	movs	r3, #1
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2210      	movs	r2, #16
 8001260:	0033      	movs	r3, r6
 8001262:	4393      	bics	r3, r2
 8001264:	d11d      	bne.n	80012a2 <_strtol_l.isra.0+0x7e>
 8001266:	2d30      	cmp	r5, #48	@ 0x30
 8001268:	d115      	bne.n	8001296 <_strtol_l.isra.0+0x72>
 800126a:	2120      	movs	r1, #32
 800126c:	7823      	ldrb	r3, [r4, #0]
 800126e:	438b      	bics	r3, r1
 8001270:	2b58      	cmp	r3, #88	@ 0x58
 8001272:	d110      	bne.n	8001296 <_strtol_l.isra.0+0x72>
 8001274:	7865      	ldrb	r5, [r4, #1]
 8001276:	3402      	adds	r4, #2
 8001278:	2610      	movs	r6, #16
 800127a:	e012      	b.n	80012a2 <_strtol_l.isra.0+0x7e>
 800127c:	f7ff fabc 	bl	80007f8 <__errno>
 8001280:	2316      	movs	r3, #22
 8001282:	6003      	str	r3, [r0, #0]
 8001284:	2000      	movs	r0, #0
 8001286:	b005      	add	sp, #20
 8001288:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800128a:	9100      	str	r1, [sp, #0]
 800128c:	2d2b      	cmp	r5, #43	@ 0x2b
 800128e:	d1e6      	bne.n	800125e <_strtol_l.isra.0+0x3a>
 8001290:	7825      	ldrb	r5, [r4, #0]
 8001292:	1c9c      	adds	r4, r3, #2
 8001294:	e7e3      	b.n	800125e <_strtol_l.isra.0+0x3a>
 8001296:	2e00      	cmp	r6, #0
 8001298:	d1ee      	bne.n	8001278 <_strtol_l.isra.0+0x54>
 800129a:	360a      	adds	r6, #10
 800129c:	2d30      	cmp	r5, #48	@ 0x30
 800129e:	d100      	bne.n	80012a2 <_strtol_l.isra.0+0x7e>
 80012a0:	3e02      	subs	r6, #2
 80012a2:	4a24      	ldr	r2, [pc, #144]	@ (8001334 <_strtol_l.isra.0+0x110>)
 80012a4:	9b00      	ldr	r3, [sp, #0]
 80012a6:	4694      	mov	ip, r2
 80012a8:	4463      	add	r3, ip
 80012aa:	0031      	movs	r1, r6
 80012ac:	0018      	movs	r0, r3
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	f7fe ffc2 	bl	8000238 <__aeabi_uidivmod>
 80012b4:	2200      	movs	r2, #0
 80012b6:	4684      	mov	ip, r0
 80012b8:	0010      	movs	r0, r2
 80012ba:	002b      	movs	r3, r5
 80012bc:	3b30      	subs	r3, #48	@ 0x30
 80012be:	2b09      	cmp	r3, #9
 80012c0:	d811      	bhi.n	80012e6 <_strtol_l.isra.0+0xc2>
 80012c2:	001d      	movs	r5, r3
 80012c4:	42ae      	cmp	r6, r5
 80012c6:	dd1d      	ble.n	8001304 <_strtol_l.isra.0+0xe0>
 80012c8:	1c53      	adds	r3, r2, #1
 80012ca:	d009      	beq.n	80012e0 <_strtol_l.isra.0+0xbc>
 80012cc:	2201      	movs	r2, #1
 80012ce:	4252      	negs	r2, r2
 80012d0:	4584      	cmp	ip, r0
 80012d2:	d305      	bcc.n	80012e0 <_strtol_l.isra.0+0xbc>
 80012d4:	d101      	bne.n	80012da <_strtol_l.isra.0+0xb6>
 80012d6:	42a9      	cmp	r1, r5
 80012d8:	db11      	blt.n	80012fe <_strtol_l.isra.0+0xda>
 80012da:	2201      	movs	r2, #1
 80012dc:	4370      	muls	r0, r6
 80012de:	1828      	adds	r0, r5, r0
 80012e0:	7825      	ldrb	r5, [r4, #0]
 80012e2:	3401      	adds	r4, #1
 80012e4:	e7e9      	b.n	80012ba <_strtol_l.isra.0+0x96>
 80012e6:	002b      	movs	r3, r5
 80012e8:	3b41      	subs	r3, #65	@ 0x41
 80012ea:	2b19      	cmp	r3, #25
 80012ec:	d801      	bhi.n	80012f2 <_strtol_l.isra.0+0xce>
 80012ee:	3d37      	subs	r5, #55	@ 0x37
 80012f0:	e7e8      	b.n	80012c4 <_strtol_l.isra.0+0xa0>
 80012f2:	002b      	movs	r3, r5
 80012f4:	3b61      	subs	r3, #97	@ 0x61
 80012f6:	2b19      	cmp	r3, #25
 80012f8:	d804      	bhi.n	8001304 <_strtol_l.isra.0+0xe0>
 80012fa:	3d57      	subs	r5, #87	@ 0x57
 80012fc:	e7e2      	b.n	80012c4 <_strtol_l.isra.0+0xa0>
 80012fe:	2201      	movs	r2, #1
 8001300:	4252      	negs	r2, r2
 8001302:	e7ed      	b.n	80012e0 <_strtol_l.isra.0+0xbc>
 8001304:	1c53      	adds	r3, r2, #1
 8001306:	d108      	bne.n	800131a <_strtol_l.isra.0+0xf6>
 8001308:	2322      	movs	r3, #34	@ 0x22
 800130a:	9a03      	ldr	r2, [sp, #12]
 800130c:	9802      	ldr	r0, [sp, #8]
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	2f00      	cmp	r7, #0
 8001312:	d0b8      	beq.n	8001286 <_strtol_l.isra.0+0x62>
 8001314:	1e63      	subs	r3, r4, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	e007      	b.n	800132a <_strtol_l.isra.0+0x106>
 800131a:	9b00      	ldr	r3, [sp, #0]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d000      	beq.n	8001322 <_strtol_l.isra.0+0xfe>
 8001320:	4240      	negs	r0, r0
 8001322:	2f00      	cmp	r7, #0
 8001324:	d0af      	beq.n	8001286 <_strtol_l.isra.0+0x62>
 8001326:	2a00      	cmp	r2, #0
 8001328:	d1f4      	bne.n	8001314 <_strtol_l.isra.0+0xf0>
 800132a:	9b01      	ldr	r3, [sp, #4]
 800132c:	603b      	str	r3, [r7, #0]
 800132e:	e7aa      	b.n	8001286 <_strtol_l.isra.0+0x62>
 8001330:	080014a8 	.word	0x080014a8
 8001334:	7fffffff 	.word	0x7fffffff

08001338 <_strtol_r>:
 8001338:	b510      	push	{r4, lr}
 800133a:	f7ff ff73 	bl	8001224 <_strtol_l.isra.0>
 800133e:	bd10      	pop	{r4, pc}

08001340 <_strtoul_l.isra.0>:
 8001340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001342:	001e      	movs	r6, r3
 8001344:	4b3e      	ldr	r3, [pc, #248]	@ (8001440 <_strtoul_l.isra.0+0x100>)
 8001346:	0017      	movs	r7, r2
 8001348:	000c      	movs	r4, r1
 800134a:	469c      	mov	ip, r3
 800134c:	2208      	movs	r2, #8
 800134e:	b085      	sub	sp, #20
 8001350:	9003      	str	r0, [sp, #12]
 8001352:	9100      	str	r1, [sp, #0]
 8001354:	0023      	movs	r3, r4
 8001356:	4661      	mov	r1, ip
 8001358:	781d      	ldrb	r5, [r3, #0]
 800135a:	3401      	adds	r4, #1
 800135c:	5d48      	ldrb	r0, [r1, r5]
 800135e:	0001      	movs	r1, r0
 8001360:	4011      	ands	r1, r2
 8001362:	4210      	tst	r0, r2
 8001364:	d1f6      	bne.n	8001354 <_strtoul_l.isra.0+0x14>
 8001366:	2d2d      	cmp	r5, #45	@ 0x2d
 8001368:	d112      	bne.n	8001390 <_strtoul_l.isra.0+0x50>
 800136a:	7825      	ldrb	r5, [r4, #0]
 800136c:	1c9c      	adds	r4, r3, #2
 800136e:	2301      	movs	r3, #1
 8001370:	9302      	str	r3, [sp, #8]
 8001372:	2210      	movs	r2, #16
 8001374:	0033      	movs	r3, r6
 8001376:	4393      	bics	r3, r2
 8001378:	d116      	bne.n	80013a8 <_strtoul_l.isra.0+0x68>
 800137a:	2d30      	cmp	r5, #48	@ 0x30
 800137c:	d10e      	bne.n	800139c <_strtoul_l.isra.0+0x5c>
 800137e:	2120      	movs	r1, #32
 8001380:	7823      	ldrb	r3, [r4, #0]
 8001382:	438b      	bics	r3, r1
 8001384:	2b58      	cmp	r3, #88	@ 0x58
 8001386:	d109      	bne.n	800139c <_strtoul_l.isra.0+0x5c>
 8001388:	7865      	ldrb	r5, [r4, #1]
 800138a:	3402      	adds	r4, #2
 800138c:	2610      	movs	r6, #16
 800138e:	e00b      	b.n	80013a8 <_strtoul_l.isra.0+0x68>
 8001390:	9102      	str	r1, [sp, #8]
 8001392:	2d2b      	cmp	r5, #43	@ 0x2b
 8001394:	d1ed      	bne.n	8001372 <_strtoul_l.isra.0+0x32>
 8001396:	7825      	ldrb	r5, [r4, #0]
 8001398:	1c9c      	adds	r4, r3, #2
 800139a:	e7ea      	b.n	8001372 <_strtoul_l.isra.0+0x32>
 800139c:	2e00      	cmp	r6, #0
 800139e:	d1f5      	bne.n	800138c <_strtoul_l.isra.0+0x4c>
 80013a0:	360a      	adds	r6, #10
 80013a2:	2d30      	cmp	r5, #48	@ 0x30
 80013a4:	d100      	bne.n	80013a8 <_strtoul_l.isra.0+0x68>
 80013a6:	3e02      	subs	r6, #2
 80013a8:	2001      	movs	r0, #1
 80013aa:	0031      	movs	r1, r6
 80013ac:	4240      	negs	r0, r0
 80013ae:	f7fe febd 	bl	800012c <__udivsi3>
 80013b2:	9001      	str	r0, [sp, #4]
 80013b4:	2001      	movs	r0, #1
 80013b6:	0031      	movs	r1, r6
 80013b8:	4240      	negs	r0, r0
 80013ba:	f7fe ff3d 	bl	8000238 <__aeabi_uidivmod>
 80013be:	2300      	movs	r3, #0
 80013c0:	2201      	movs	r2, #1
 80013c2:	0018      	movs	r0, r3
 80013c4:	4694      	mov	ip, r2
 80013c6:	002a      	movs	r2, r5
 80013c8:	3a30      	subs	r2, #48	@ 0x30
 80013ca:	2a09      	cmp	r2, #9
 80013cc:	d812      	bhi.n	80013f4 <_strtoul_l.isra.0+0xb4>
 80013ce:	0015      	movs	r5, r2
 80013d0:	42ae      	cmp	r6, r5
 80013d2:	dd1e      	ble.n	8001412 <_strtoul_l.isra.0+0xd2>
 80013d4:	1c5a      	adds	r2, r3, #1
 80013d6:	d00a      	beq.n	80013ee <_strtoul_l.isra.0+0xae>
 80013d8:	2301      	movs	r3, #1
 80013da:	9a01      	ldr	r2, [sp, #4]
 80013dc:	425b      	negs	r3, r3
 80013de:	4282      	cmp	r2, r0
 80013e0:	d305      	bcc.n	80013ee <_strtoul_l.isra.0+0xae>
 80013e2:	d101      	bne.n	80013e8 <_strtoul_l.isra.0+0xa8>
 80013e4:	42a9      	cmp	r1, r5
 80013e6:	db11      	blt.n	800140c <_strtoul_l.isra.0+0xcc>
 80013e8:	4663      	mov	r3, ip
 80013ea:	4370      	muls	r0, r6
 80013ec:	1828      	adds	r0, r5, r0
 80013ee:	7825      	ldrb	r5, [r4, #0]
 80013f0:	3401      	adds	r4, #1
 80013f2:	e7e8      	b.n	80013c6 <_strtoul_l.isra.0+0x86>
 80013f4:	002a      	movs	r2, r5
 80013f6:	3a41      	subs	r2, #65	@ 0x41
 80013f8:	2a19      	cmp	r2, #25
 80013fa:	d801      	bhi.n	8001400 <_strtoul_l.isra.0+0xc0>
 80013fc:	3d37      	subs	r5, #55	@ 0x37
 80013fe:	e7e7      	b.n	80013d0 <_strtoul_l.isra.0+0x90>
 8001400:	002a      	movs	r2, r5
 8001402:	3a61      	subs	r2, #97	@ 0x61
 8001404:	2a19      	cmp	r2, #25
 8001406:	d804      	bhi.n	8001412 <_strtoul_l.isra.0+0xd2>
 8001408:	3d57      	subs	r5, #87	@ 0x57
 800140a:	e7e1      	b.n	80013d0 <_strtoul_l.isra.0+0x90>
 800140c:	2301      	movs	r3, #1
 800140e:	425b      	negs	r3, r3
 8001410:	e7ed      	b.n	80013ee <_strtoul_l.isra.0+0xae>
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	d107      	bne.n	8001426 <_strtoul_l.isra.0+0xe6>
 8001416:	2222      	movs	r2, #34	@ 0x22
 8001418:	9903      	ldr	r1, [sp, #12]
 800141a:	0018      	movs	r0, r3
 800141c:	600a      	str	r2, [r1, #0]
 800141e:	2f00      	cmp	r7, #0
 8001420:	d109      	bne.n	8001436 <_strtoul_l.isra.0+0xf6>
 8001422:	b005      	add	sp, #20
 8001424:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001426:	9a02      	ldr	r2, [sp, #8]
 8001428:	2a00      	cmp	r2, #0
 800142a:	d000      	beq.n	800142e <_strtoul_l.isra.0+0xee>
 800142c:	4240      	negs	r0, r0
 800142e:	2f00      	cmp	r7, #0
 8001430:	d0f7      	beq.n	8001422 <_strtoul_l.isra.0+0xe2>
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <_strtoul_l.isra.0+0xfa>
 8001436:	1e63      	subs	r3, r4, #1
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	9b00      	ldr	r3, [sp, #0]
 800143c:	603b      	str	r3, [r7, #0]
 800143e:	e7f0      	b.n	8001422 <_strtoul_l.isra.0+0xe2>
 8001440:	080014a8 	.word	0x080014a8

08001444 <_strtoul_r>:
 8001444:	b510      	push	{r4, lr}
 8001446:	f7ff ff7b 	bl	8001340 <_strtoul_l.isra.0>
 800144a:	bd10      	pop	{r4, pc}

0800144c <_malloc_usable_size_r>:
 800144c:	1f0b      	subs	r3, r1, #4
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	1f18      	subs	r0, r3, #4
 8001452:	2b00      	cmp	r3, #0
 8001454:	da01      	bge.n	800145a <_malloc_usable_size_r+0xe>
 8001456:	580b      	ldr	r3, [r1, r0]
 8001458:	18c0      	adds	r0, r0, r3
 800145a:	4770      	bx	lr

0800145c <_init>:
 800145c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800145e:	46c0      	nop			@ (mov r8, r8)
 8001460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001462:	bc08      	pop	{r3}
 8001464:	469e      	mov	lr, r3
 8001466:	4770      	bx	lr

08001468 <_fini>:
 8001468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800146e:	bc08      	pop	{r3}
 8001470:	469e      	mov	lr, r3
 8001472:	4770      	bx	lr
